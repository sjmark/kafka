// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: queue.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Des string  `protobuf:"bytes,1,opt,name=Des,proto3" json:"Des,omitempty"`
	Tag *TagBiz `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{0}
}

func (x *Test) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *Test) GetTag() *TagBiz {
	if x != nil {
		return x.Tag
	}
	return nil
}

// 委托
type Consignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                   //ID
	InitServerNo                string  `protobuf:"bytes,2,opt,name=init_server_no,json=initServerNo,proto3" json:"init_server_no,omitempty"`                                         //原始服务器编号
	Lab_Id                      string  `protobuf:"bytes,3,opt,name=Lab_Id,json=LabId,proto3" json:"Lab_Id,omitempty"`                                                                //实验室ID
	Event_Id                    string  `protobuf:"bytes,4,opt,name=Event_Id,json=EventId,proto3" json:"Event_Id,omitempty"`                                                          //案事件ID
	Category                    string  `protobuf:"bytes,5,opt,name=Category,proto3" json:"Category,omitempty"`                                                                       //委托类型
	Consignment_No              string  `protobuf:"bytes,6,opt,name=Consignment_No,json=ConsignmentNo,proto3" json:"Consignment_No,omitempty"`                                        //委托编号
	Consign_Org_Regionalism     string  `protobuf:"bytes,7,opt,name=Consign_Org_Regionalism,json=ConsignOrgRegionalism,proto3" json:"Consign_Org_Regionalism,omitempty"`              //委托单位行政区划
	Consign_Org_Name            string  `protobuf:"bytes,8,opt,name=Consign_Org_Name,json=ConsignOrgName,proto3" json:"Consign_Org_Name,omitempty"`                                   //委托单位名称
	Consign_Org_Phone           string  `protobuf:"bytes,9,opt,name=Consign_Org_Phone,json=ConsignOrgPhone,proto3" json:"Consign_Org_Phone,omitempty"`                                //委托单位电话
	Consign_Org_Fax_No          string  `protobuf:"bytes,10,opt,name=Consign_Org_Fax_No,json=ConsignOrgFaxNo,proto3" json:"Consign_Org_Fax_No,omitempty"`                             //委托单位传真号码
	Consign_Org_Zip_Code        string  `protobuf:"bytes,11,opt,name=Consign_Org_Zip_Code,json=ConsignOrgZipCode,proto3" json:"Consign_Org_Zip_Code,omitempty"`                       //委托单位邮编
	Consign_Org_Address         string  `protobuf:"bytes,12,opt,name=Consign_Org_Address,json=ConsignOrgAddress,proto3" json:"Consign_Org_Address,omitempty"`                         //委托单位地址
	Consign_Brief               string  `protobuf:"bytes,13,opt,name=Consign_Brief,json=ConsignBrief,proto3" json:"Consign_Brief,omitempty"`                                          //委托详情
	Original_Identy_Info        string  `protobuf:"bytes,14,opt,name=Original_Identy_Info,json=OriginalIdentyInfo,proto3" json:"Original_Identy_Info,omitempty"`                      //原鉴定情况
	Re_Identy_Reason            string  `protobuf:"bytes,15,opt,name=Re_Identy_Reason,json=ReIdentyReason,proto3" json:"Re_Identy_Reason,omitempty"`                                  //重新鉴定理由
	Consigner_Name              string  `protobuf:"bytes,16,opt,name=Consigner_Name,json=ConsignerName,proto3" json:"Consigner_Name,omitempty"`                                       //委托人姓名
	Consigner_Duty              string  `protobuf:"bytes,17,opt,name=Consigner_Duty,json=ConsignerDuty,proto3" json:"Consigner_Duty,omitempty"`                                       //委托人职务
	Consigner_Phone             string  `protobuf:"bytes,18,opt,name=Consigner_Phone,json=ConsignerPhone,proto3" json:"Consigner_Phone,omitempty"`                                    //委托人电话
	Consigner_Certificate_Type  string  `protobuf:"bytes,19,opt,name=Consigner_Certificate_Type,json=ConsignerCertificateType,proto3" json:"Consigner_Certificate_Type,omitempty"`    //委托人证件类型
	Consigner_Certificate_No    string  `protobuf:"bytes,20,opt,name=Consigner_Certificate_No,json=ConsignerCertificateNo,proto3" json:"Consigner_Certificate_No,omitempty"`          //委托人证件号码
	Consigner_Address           string  `protobuf:"bytes,21,opt,name=Consigner_Address,json=ConsignerAddress,proto3" json:"Consigner_Address,omitempty"`                              //委托人通讯地址
	Consigner_Zip_Code          string  `protobuf:"bytes,22,opt,name=Consigner_Zip_Code,json=ConsignerZipCode,proto3" json:"Consigner_Zip_Code,omitempty"`                            //委托人通讯邮编
	Consigner_Name2             string  `protobuf:"bytes,23,opt,name=Consigner_Name2,json=ConsignerName2,proto3" json:"Consigner_Name2,omitempty"`                                    //委托人姓名2
	Consigner_Duty2             string  `protobuf:"bytes,24,opt,name=Consigner_Duty2,json=ConsignerDuty2,proto3" json:"Consigner_Duty2,omitempty"`                                    //委托人职务2
	Consigner_Phone2            string  `protobuf:"bytes,25,opt,name=Consigner_Phone2,json=ConsignerPhone2,proto3" json:"Consigner_Phone2,omitempty"`                                 //委托人电话2
	Consigner_Certificate_Type2 string  `protobuf:"bytes,26,opt,name=Consigner_Certificate_Type2,json=ConsignerCertificateType2,proto3" json:"Consigner_Certificate_Type2,omitempty"` //委托人证件类型2
	Consigner_Certificate_No2   string  `protobuf:"bytes,27,opt,name=Consigner_Certificate_No2,json=ConsignerCertificateNo2,proto3" json:"Consigner_Certificate_No2,omitempty"`       //委托人证件号码2
	Consigner_Address2          string  `protobuf:"bytes,28,opt,name=Consigner_Address2,json=ConsignerAddress2,proto3" json:"Consigner_Address2,omitempty"`                           //委托人通讯地址2
	Consigner_Zip_Code2         string  `protobuf:"bytes,29,opt,name=Consigner_Zip_Code2,json=ConsignerZipCode2,proto3" json:"Consigner_Zip_Code2,omitempty"`                         //委托人通讯邮编2
	Accept_No                   string  `protobuf:"bytes,30,opt,name=Accept_No,json=AcceptNo,proto3" json:"Accept_No,omitempty"`                                                      //受理编号
	Acceptor_Id                 string  `protobuf:"bytes,31,opt,name=Acceptor_Id,json=AcceptorId,proto3" json:"Acceptor_Id,omitempty"`                                                //受理人ID
	Acceptor_Name               string  `protobuf:"bytes,32,opt,name=Acceptor_Name,json=AcceptorName,proto3" json:"Acceptor_Name,omitempty"`                                          //受理人名称
	Accept_Regionalism          string  `protobuf:"bytes,33,opt,name=Accept_Regionalism,json=AcceptRegionalism,proto3" json:"Accept_Regionalism,omitempty"`                           //受理单位行政区划
	Accept_Org_Name             string  `protobuf:"bytes,34,opt,name=Accept_Org_Name,json=AcceptOrgName,proto3" json:"Accept_Org_Name,omitempty"`                                     //受理单位名称
	Accept_Org_Phone            string  `protobuf:"bytes,35,opt,name=Accept_Org_Phone,json=AcceptOrgPhone,proto3" json:"Accept_Org_Phone,omitempty"`                                  //受理单位电话
	Identify_Request            string  `protobuf:"bytes,36,opt,name=Identify_Request,json=IdentifyRequest,proto3" json:"Identify_Request,omitempty"`                                 //鉴定要求
	Promise                     string  `protobuf:"bytes,37,opt,name=Promise,proto3" json:"Promise,omitempty"`                                                                        //双方约定
	Specialty                   string  `protobuf:"bytes,38,opt,name=Specialty,proto3" json:"Specialty,omitempty"`                                                                    //专业
	Remark                      string  `protobuf:"bytes,39,opt,name=Remark,proto3" json:"Remark,omitempty"`                                                                          //备注
	Accept_Opinion              string  `protobuf:"bytes,40,opt,name=Accept_Opinion,json=AcceptOpinion,proto3" json:"Accept_Opinion,omitempty"`                                       //受理意见
	Identify_Result             string  `protobuf:"bytes,41,opt,name=Identify_Result,json=IdentifyResult,proto3" json:"Identify_Result,omitempty"`                                    //鉴定结论
	Status                      string  `protobuf:"bytes,42,opt,name=Status,proto3" json:"Status,omitempty"`                                                                          //委托状态
	Is_Append                   int64   `protobuf:"varint,43,opt,name=Is_Append,json=IsAppend,proto3" json:"Is_Append,omitempty"`                                                     //是否补送
	Transfer_Flag               int64   `protobuf:"varint,44,opt,name=Transfer_Flag,json=TransferFlag,proto3" json:"Transfer_Flag,omitempty"`                                         //上报标识，0不上报，1待上报，2成功，3等待重试，4错误，5正在上报
	Transfer_User               string  `protobuf:"bytes,45,opt,name=Transfer_User,json=TransferUser,proto3" json:"Transfer_User,omitempty"`                                          //上报人
	Update_Status               string  `protobuf:"bytes,46,opt,name=Update_Status,json=UpdateStatus,proto3" json:"Update_Status,omitempty"`                                          //委托更新状态
	Delete_Flag                 int64   `protobuf:"varint,47,opt,name=Delete_Flag,json=DeleteFlag,proto3" json:"Delete_Flag,omitempty"`                                               //删除标识
	Data_Source                 string  `protobuf:"bytes,48,opt,name=Data_Source,json=DataSource,proto3" json:"Data_Source,omitempty"`                                                //数据来源，0新系统录入，100旧系统转换得到
	Sample_Seq_No               int64   `protobuf:"varint,49,opt,name=Sample_Seq_No,json=SampleSeqNo,proto3" json:"Sample_Seq_No,omitempty"`                                          //样本流水号
	Data_Level                  int64   `protobuf:"varint,50,opt,name=Data_Level,json=DataLevel,proto3" json:"Data_Level,omitempty"`                                                  //数据级别
	Reserve1                    string  `protobuf:"bytes,51,opt,name=Reserve1,proto3" json:"Reserve1,omitempty"`                                                                      //现勘委托编号
	Reserve2                    string  `protobuf:"bytes,52,opt,name=Reserve2,proto3" json:"Reserve2,omitempty"`                                                                      //备用字段2
	Reserve3                    string  `protobuf:"bytes,53,opt,name=Reserve3,proto3" json:"Reserve3,omitempty"`                                                                      //备用字段3
	Reserve4                    string  `protobuf:"bytes,54,opt,name=Reserve4,proto3" json:"Reserve4,omitempty"`                                                                      //备用字段4
	Reserve5                    string  `protobuf:"bytes,55,opt,name=Reserve5,proto3" json:"Reserve5,omitempty"`                                                                      //备用字段5
	Reserve6                    string  `protobuf:"bytes,56,opt,name=Reserve6,proto3" json:"Reserve6,omitempty"`                                                                      //备用字段6
	Create_User                 string  `protobuf:"bytes,57,opt,name=Create_User,json=CreateUser,proto3" json:"Create_User,omitempty"`                                                //创建人
	Update_User                 string  `protobuf:"bytes,58,opt,name=Update_User,json=UpdateUser,proto3" json:"Update_User,omitempty"`                                                //更新人
	Main_Consignment_Id         string  `protobuf:"bytes,59,opt,name=Main_Consignment_Id,json=MainConsignmentId,proto3" json:"Main_Consignment_Id,omitempty"`                         //主委托ID
	Sampling_Regionalism        string  `protobuf:"bytes,60,opt,name=Sampling_Regionalism,json=SamplingRegionalism,proto3" json:"Sampling_Regionalism,omitempty"`                     //采样单位
	Sampling_Name               string  `protobuf:"bytes,61,opt,name=Sampling_Name,json=SamplingName,proto3" json:"Sampling_Name,omitempty"`                                          //采样人
	Sampling_Phone              string  `protobuf:"bytes,62,opt,name=Sampling_Phone,json=SamplingPhone,proto3" json:"Sampling_Phone,omitempty"`                                       //联系电话
	Parent_Type                 string  `protobuf:"bytes,63,opt,name=Parent_Type,json=ParentType,proto3" json:"Parent_Type,omitempty"`                                                //父母类型
	Single_Case                 string  `protobuf:"bytes,64,opt,name=Single_Case,json=SingleCase,proto3" json:"Single_Case,omitempty"`                                                //单亲情况
	Retry_Count                 int64   `protobuf:"varint,65,opt,name=Retry_Count,json=RetryCount,proto3" json:"Retry_Count,omitempty"`                                               //重试次数
	Error_Msg                   string  `protobuf:"bytes,66,opt,name=Error_Msg,json=ErrorMsg,proto3" json:"Error_Msg,omitempty"`                                                      //错误描述
	Task_No                     string  `protobuf:"bytes,67,opt,name=Task_No,json=TaskNo,proto3" json:"Task_No,omitempty"`                                                            //任务号
	Consigner_Fax_No            string  `protobuf:"bytes,68,opt,name=Consigner_Fax_No,json=ConsignerFaxNo,proto3" json:"Consigner_Fax_No,omitempty"`                                  //委托人传真号码
	Consigner_Fax_No2           string  `protobuf:"bytes,69,opt,name=Consigner_Fax_No2,json=ConsignerFaxNo2,proto3" json:"Consigner_Fax_No2,omitempty"`                               //委托人传真号码2
	No_Examin_Reason            string  `protobuf:"bytes,70,opt,name=No_Examin_Reason,json=NoExaminReason,proto3" json:"No_Examin_Reason,omitempty"`                                  //未检原因
	Va                          string  `protobuf:"bytes,71,opt,name=Va,proto3" json:"Va,omitempty"`                                                                                  //通用字段
	Flag                        int64   `protobuf:"varint,72,opt,name=Flag,proto3" json:"Flag,omitempty"`                                                                             //标识
	Ext_Id                      string  `protobuf:"bytes,73,opt,name=Ext_Id,json=ExtId,proto3" json:"Ext_Id,omitempty"`                                                               //外部系统主键
	Section                     string  `protobuf:"bytes,74,opt,name=Section,proto3" json:"Section,omitempty"`                                                                        //专业
	Identify_Category           string  `protobuf:"bytes,75,opt,name=Identify_Category,json=IdentifyCategory,proto3" json:"Identify_Category,omitempty"`                              // 鉴定类别
	Identify_Status             string  `protobuf:"bytes,76,opt,name=Identify_Status,json=IdentifyStatus,proto3" json:"Identify_Status,omitempty"`                                    // 鉴定状态
	Consign_Datetime            string  `protobuf:"bytes,77,opt,name=Consign_Datetime,json=ConsignDatetime,proto3" json:"Consign_Datetime,omitempty"`                                 //委托时间
	Accept_Datetime             string  `protobuf:"bytes,78,opt,name=Accept_Datetime,json=AcceptDatetime,proto3" json:"Accept_Datetime,omitempty"`                                    //受理时间
	Transfer_Datetime           string  `protobuf:"bytes,79,opt,name=Transfer_Datetime,json=TransferDatetime,proto3" json:"Transfer_Datetime,omitempty"`                              //上报时间
	Create_Datetime             string  `protobuf:"bytes,80,opt,name=Create_Datetime,json=CreateDatetime,proto3" json:"Create_Datetime,omitempty"`                                    //创建时间
	Update_Datetime             string  `protobuf:"bytes,81,opt,name=Update_Datetime,json=UpdateDatetime,proto3" json:"Update_Datetime,omitempty"`                                    //更新时间
	Sampling_Datetime           string  `protobuf:"bytes,82,opt,name=Sampling_Datetime,json=SamplingDatetime,proto3" json:"Sampling_Datetime,omitempty"`                              //采样日期
	Duedate                     string  `protobuf:"bytes,83,opt,name=Duedate,proto3" json:"Duedate,omitempty"`                                                                        //约定鉴定期限
	Local_Store_Datetime        string  `protobuf:"bytes,84,opt,name=Local_Store_Datetime,json=LocalStoreDatetime,proto3" json:"Local_Store_Datetime,omitempty"`                      //本地存储时间
	Tag                         *TagBiz `protobuf:"bytes,85,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Consignment) Reset() {
	*x = Consignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consignment) ProtoMessage() {}

func (x *Consignment) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consignment.ProtoReflect.Descriptor instead.
func (*Consignment) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{1}
}

func (x *Consignment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Consignment) GetInitServerNo() string {
	if x != nil {
		return x.InitServerNo
	}
	return ""
}

func (x *Consignment) GetLab_Id() string {
	if x != nil {
		return x.Lab_Id
	}
	return ""
}

func (x *Consignment) GetEvent_Id() string {
	if x != nil {
		return x.Event_Id
	}
	return ""
}

func (x *Consignment) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Consignment) GetConsignment_No() string {
	if x != nil {
		return x.Consignment_No
	}
	return ""
}

func (x *Consignment) GetConsign_Org_Regionalism() string {
	if x != nil {
		return x.Consign_Org_Regionalism
	}
	return ""
}

func (x *Consignment) GetConsign_Org_Name() string {
	if x != nil {
		return x.Consign_Org_Name
	}
	return ""
}

func (x *Consignment) GetConsign_Org_Phone() string {
	if x != nil {
		return x.Consign_Org_Phone
	}
	return ""
}

func (x *Consignment) GetConsign_Org_Fax_No() string {
	if x != nil {
		return x.Consign_Org_Fax_No
	}
	return ""
}

func (x *Consignment) GetConsign_Org_Zip_Code() string {
	if x != nil {
		return x.Consign_Org_Zip_Code
	}
	return ""
}

func (x *Consignment) GetConsign_Org_Address() string {
	if x != nil {
		return x.Consign_Org_Address
	}
	return ""
}

func (x *Consignment) GetConsign_Brief() string {
	if x != nil {
		return x.Consign_Brief
	}
	return ""
}

func (x *Consignment) GetOriginal_Identy_Info() string {
	if x != nil {
		return x.Original_Identy_Info
	}
	return ""
}

func (x *Consignment) GetRe_Identy_Reason() string {
	if x != nil {
		return x.Re_Identy_Reason
	}
	return ""
}

func (x *Consignment) GetConsigner_Name() string {
	if x != nil {
		return x.Consigner_Name
	}
	return ""
}

func (x *Consignment) GetConsigner_Duty() string {
	if x != nil {
		return x.Consigner_Duty
	}
	return ""
}

func (x *Consignment) GetConsigner_Phone() string {
	if x != nil {
		return x.Consigner_Phone
	}
	return ""
}

func (x *Consignment) GetConsigner_Certificate_Type() string {
	if x != nil {
		return x.Consigner_Certificate_Type
	}
	return ""
}

func (x *Consignment) GetConsigner_Certificate_No() string {
	if x != nil {
		return x.Consigner_Certificate_No
	}
	return ""
}

func (x *Consignment) GetConsigner_Address() string {
	if x != nil {
		return x.Consigner_Address
	}
	return ""
}

func (x *Consignment) GetConsigner_Zip_Code() string {
	if x != nil {
		return x.Consigner_Zip_Code
	}
	return ""
}

func (x *Consignment) GetConsigner_Name2() string {
	if x != nil {
		return x.Consigner_Name2
	}
	return ""
}

func (x *Consignment) GetConsigner_Duty2() string {
	if x != nil {
		return x.Consigner_Duty2
	}
	return ""
}

func (x *Consignment) GetConsigner_Phone2() string {
	if x != nil {
		return x.Consigner_Phone2
	}
	return ""
}

func (x *Consignment) GetConsigner_Certificate_Type2() string {
	if x != nil {
		return x.Consigner_Certificate_Type2
	}
	return ""
}

func (x *Consignment) GetConsigner_Certificate_No2() string {
	if x != nil {
		return x.Consigner_Certificate_No2
	}
	return ""
}

func (x *Consignment) GetConsigner_Address2() string {
	if x != nil {
		return x.Consigner_Address2
	}
	return ""
}

func (x *Consignment) GetConsigner_Zip_Code2() string {
	if x != nil {
		return x.Consigner_Zip_Code2
	}
	return ""
}

func (x *Consignment) GetAccept_No() string {
	if x != nil {
		return x.Accept_No
	}
	return ""
}

func (x *Consignment) GetAcceptor_Id() string {
	if x != nil {
		return x.Acceptor_Id
	}
	return ""
}

func (x *Consignment) GetAcceptor_Name() string {
	if x != nil {
		return x.Acceptor_Name
	}
	return ""
}

func (x *Consignment) GetAccept_Regionalism() string {
	if x != nil {
		return x.Accept_Regionalism
	}
	return ""
}

func (x *Consignment) GetAccept_Org_Name() string {
	if x != nil {
		return x.Accept_Org_Name
	}
	return ""
}

func (x *Consignment) GetAccept_Org_Phone() string {
	if x != nil {
		return x.Accept_Org_Phone
	}
	return ""
}

func (x *Consignment) GetIdentify_Request() string {
	if x != nil {
		return x.Identify_Request
	}
	return ""
}

func (x *Consignment) GetPromise() string {
	if x != nil {
		return x.Promise
	}
	return ""
}

func (x *Consignment) GetSpecialty() string {
	if x != nil {
		return x.Specialty
	}
	return ""
}

func (x *Consignment) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Consignment) GetAccept_Opinion() string {
	if x != nil {
		return x.Accept_Opinion
	}
	return ""
}

func (x *Consignment) GetIdentify_Result() string {
	if x != nil {
		return x.Identify_Result
	}
	return ""
}

func (x *Consignment) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Consignment) GetIs_Append() int64 {
	if x != nil {
		return x.Is_Append
	}
	return 0
}

func (x *Consignment) GetTransfer_Flag() int64 {
	if x != nil {
		return x.Transfer_Flag
	}
	return 0
}

func (x *Consignment) GetTransfer_User() string {
	if x != nil {
		return x.Transfer_User
	}
	return ""
}

func (x *Consignment) GetUpdate_Status() string {
	if x != nil {
		return x.Update_Status
	}
	return ""
}

func (x *Consignment) GetDelete_Flag() int64 {
	if x != nil {
		return x.Delete_Flag
	}
	return 0
}

func (x *Consignment) GetData_Source() string {
	if x != nil {
		return x.Data_Source
	}
	return ""
}

func (x *Consignment) GetSample_Seq_No() int64 {
	if x != nil {
		return x.Sample_Seq_No
	}
	return 0
}

func (x *Consignment) GetData_Level() int64 {
	if x != nil {
		return x.Data_Level
	}
	return 0
}

func (x *Consignment) GetReserve1() string {
	if x != nil {
		return x.Reserve1
	}
	return ""
}

func (x *Consignment) GetReserve2() string {
	if x != nil {
		return x.Reserve2
	}
	return ""
}

func (x *Consignment) GetReserve3() string {
	if x != nil {
		return x.Reserve3
	}
	return ""
}

func (x *Consignment) GetReserve4() string {
	if x != nil {
		return x.Reserve4
	}
	return ""
}

func (x *Consignment) GetReserve5() string {
	if x != nil {
		return x.Reserve5
	}
	return ""
}

func (x *Consignment) GetReserve6() string {
	if x != nil {
		return x.Reserve6
	}
	return ""
}

func (x *Consignment) GetCreate_User() string {
	if x != nil {
		return x.Create_User
	}
	return ""
}

func (x *Consignment) GetUpdate_User() string {
	if x != nil {
		return x.Update_User
	}
	return ""
}

func (x *Consignment) GetMain_Consignment_Id() string {
	if x != nil {
		return x.Main_Consignment_Id
	}
	return ""
}

func (x *Consignment) GetSampling_Regionalism() string {
	if x != nil {
		return x.Sampling_Regionalism
	}
	return ""
}

func (x *Consignment) GetSampling_Name() string {
	if x != nil {
		return x.Sampling_Name
	}
	return ""
}

func (x *Consignment) GetSampling_Phone() string {
	if x != nil {
		return x.Sampling_Phone
	}
	return ""
}

func (x *Consignment) GetParent_Type() string {
	if x != nil {
		return x.Parent_Type
	}
	return ""
}

func (x *Consignment) GetSingle_Case() string {
	if x != nil {
		return x.Single_Case
	}
	return ""
}

func (x *Consignment) GetRetry_Count() int64 {
	if x != nil {
		return x.Retry_Count
	}
	return 0
}

func (x *Consignment) GetError_Msg() string {
	if x != nil {
		return x.Error_Msg
	}
	return ""
}

func (x *Consignment) GetTask_No() string {
	if x != nil {
		return x.Task_No
	}
	return ""
}

func (x *Consignment) GetConsigner_Fax_No() string {
	if x != nil {
		return x.Consigner_Fax_No
	}
	return ""
}

func (x *Consignment) GetConsigner_Fax_No2() string {
	if x != nil {
		return x.Consigner_Fax_No2
	}
	return ""
}

func (x *Consignment) GetNo_Examin_Reason() string {
	if x != nil {
		return x.No_Examin_Reason
	}
	return ""
}

func (x *Consignment) GetVa() string {
	if x != nil {
		return x.Va
	}
	return ""
}

func (x *Consignment) GetFlag() int64 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *Consignment) GetExt_Id() string {
	if x != nil {
		return x.Ext_Id
	}
	return ""
}

func (x *Consignment) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *Consignment) GetIdentify_Category() string {
	if x != nil {
		return x.Identify_Category
	}
	return ""
}

func (x *Consignment) GetIdentify_Status() string {
	if x != nil {
		return x.Identify_Status
	}
	return ""
}

func (x *Consignment) GetConsign_Datetime() string {
	if x != nil {
		return x.Consign_Datetime
	}
	return ""
}

func (x *Consignment) GetAccept_Datetime() string {
	if x != nil {
		return x.Accept_Datetime
	}
	return ""
}

func (x *Consignment) GetTransfer_Datetime() string {
	if x != nil {
		return x.Transfer_Datetime
	}
	return ""
}

func (x *Consignment) GetCreate_Datetime() string {
	if x != nil {
		return x.Create_Datetime
	}
	return ""
}

func (x *Consignment) GetUpdate_Datetime() string {
	if x != nil {
		return x.Update_Datetime
	}
	return ""
}

func (x *Consignment) GetSampling_Datetime() string {
	if x != nil {
		return x.Sampling_Datetime
	}
	return ""
}

func (x *Consignment) GetDuedate() string {
	if x != nil {
		return x.Duedate
	}
	return ""
}

func (x *Consignment) GetLocal_Store_Datetime() string {
	if x != nil {
		return x.Local_Store_Datetime
	}
	return ""
}

func (x *Consignment) GetTag() *TagBiz {
	if x != nil {
		return x.Tag
	}
	return nil
}

// 案件
type CaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                                              //案件ID
	Init_Server_No       string  `protobuf:"bytes,2,opt,name=Init_Server_No,json=InitServerNo,proto3" json:"Init_Server_No,omitempty"`                    //原始服务器编号
	Lab_Id               string  `protobuf:"bytes,3,opt,name=Lab_Id,json=LabId,proto3" json:"Lab_Id,omitempty"`                                           //实验室ID
	Case_No              string  `protobuf:"bytes,4,opt,name=Case_No,json=CaseNo,proto3" json:"Case_No,omitempty"`                                        //案件编号
	Case_Name            string  `protobuf:"bytes,5,opt,name=Case_Name,json=CaseName,proto3" json:"Case_Name,omitempty"`                                  //案件名称
	Scene_Regionalism    string  `protobuf:"bytes,6,opt,name=Scene_Regionalism,json=SceneRegionalism,proto3" json:"Scene_Regionalism,omitempty"`          //案发地行政区划
	Scene_Place          string  `protobuf:"bytes,7,opt,name=Scene_Place,json=ScenePlace,proto3" json:"Scene_Place,omitempty"`                            //案发地详址
	Occurrence_Datetime  string  `protobuf:"bytes,8,opt,name=Occurrence_Datetime,json=OccurrenceDatetime,proto3" json:"Occurrence_Datetime,omitempty"`    //案发时间
	Case_Level           string  `protobuf:"bytes,9,opt,name=Case_Level,json=CaseLevel,proto3" json:"Case_Level,omitempty"`                               //案件级别
	Case_Type            string  `protobuf:"bytes,10,opt,name=Case_Type,json=CaseType,proto3" json:"Case_Type,omitempty"`                                 //案件类型
	Case_Property        string  `protobuf:"bytes,11,opt,name=Case_Property,json=CaseProperty,proto3" json:"Case_Property,omitempty"`                     //案件性质
	Harm_Level           string  `protobuf:"bytes,12,opt,name=Harm_Level,json=HarmLevel,proto3" json:"Harm_Level,omitempty"`                              //案件危害程度
	Scene_Area_Type      string  `protobuf:"bytes,13,opt,name=Scene_Area_Type,json=SceneAreaType,proto3" json:"Scene_Area_Type,omitempty"`                //发案地域类型
	Case_Info_Origin     string  `protobuf:"bytes,14,opt,name=Case_Info_Origin,json=CaseInfoOrigin,proto3" json:"Case_Info_Origin,omitempty"`             //案件信息来源
	Case_Brief           string  `protobuf:"bytes,15,opt,name=Case_Brief,json=CaseBrief,proto3" json:"Case_Brief,omitempty"`                              //简要案情
	Case_Status          string  `protobuf:"bytes,16,opt,name=Case_Status,json=CaseStatus,proto3" json:"Case_Status,omitempty"`                           //案件状态
	Delete_Flag          int64   `protobuf:"varint,17,opt,name=Delete_Flag,json=DeleteFlag,proto3" json:"Delete_Flag,omitempty"`                          //删除标记
	Transfer_Flag        int64   `protobuf:"varint,18,opt,name=Transfer_Flag,json=TransferFlag,proto3" json:"Transfer_Flag,omitempty"`                    //上报标识，0不上报，1待上报，2成功，3等待重试，4错误，5正在上报
	Transfer_User        string  `protobuf:"bytes,19,opt,name=Transfer_User,json=TransferUser,proto3" json:"Transfer_User,omitempty"`                     //上报人
	Transfer_Datetime    string  `protobuf:"bytes,20,opt,name=Transfer_Datetime,json=TransferDatetime,proto3" json:"Transfer_Datetime,omitempty"`         //上报时间
	Identify_Flag        int64   `protobuf:"varint,21,opt,name=Identify_Flag,json=IdentifyFlag,proto3" json:"Identify_Flag,omitempty"`                    //鉴定标识
	Identify_Role        string  `protobuf:"bytes,22,opt,name=Identify_Role,json=IdentifyRole,proto3" json:"Identify_Role,omitempty"`                     //鉴定结论是否取关键作用
	Data_Source          string  `protobuf:"bytes,23,opt,name=Data_Source,json=DataSource,proto3" json:"Data_Source,omitempty"`                           //数据来源
	Data_Level           int64   `protobuf:"varint,24,opt,name=Data_Level,json=DataLevel,proto3" json:"Data_Level,omitempty"`                             //数据级别
	Phy_Evidence_Flag    int64   `protobuf:"varint,59,opt,name=Phy_Evidence_Flag,json=PhyEvidenceFlag,proto3" json:"Phy_Evidence_Flag,omitempty"`         //标记案件下的物证是否上报
	Reserve2             string  `protobuf:"bytes,25,opt,name=Reserve2,proto3" json:"Reserve2,omitempty"`                                                 //备用字段2
	Reserve3             string  `protobuf:"bytes,26,opt,name=Reserve3,proto3" json:"Reserve3,omitempty"`                                                 //备用字段3
	Reserve4             string  `protobuf:"bytes,27,opt,name=Reserve4,proto3" json:"Reserve4,omitempty"`                                                 //备用字段4
	Reserve5             string  `protobuf:"bytes,28,opt,name=Reserve5,proto3" json:"Reserve5,omitempty"`                                                 //备用字段5
	Reserve6             string  `protobuf:"bytes,29,opt,name=Reserve6,proto3" json:"Reserve6,omitempty"`                                                 //备用字段6
	Remark               string  `protobuf:"bytes,30,opt,name=Remark,proto3" json:"Remark,omitempty"`                                                     //备注
	Create_Datetime      string  `protobuf:"bytes,31,opt,name=Create_Datetime,json=CreateDatetime,proto3" json:"Create_Datetime,omitempty"`               //创建时间
	Create_User          string  `protobuf:"bytes,32,opt,name=Create_User,json=CreateUser,proto3" json:"Create_User,omitempty"`                           //创建人
	Update_Datetime      string  `protobuf:"bytes,33,opt,name=Update_Datetime,json=UpdateDatetime,proto3" json:"Update_Datetime,omitempty"`               //更新时间
	Update_User          string  `protobuf:"bytes,34,opt,name=Update_User,json=UpdateUser,proto3" json:"Update_User,omitempty"`                           //更新人
	Case_Version3_No     string  `protobuf:"bytes,35,opt,name=Case_Version3_No,json=CaseVersion3No,proto3" json:"Case_Version3_No,omitempty"`             //案件三版本编号  (赣州 :0表示普通案件，1表示考核案件)
	Case_Acceptor_Phone  string  `protobuf:"bytes,36,opt,name=Case_Acceptor_Phone,json=CaseAcceptorPhone,proto3" json:"Case_Acceptor_Phone,omitempty"`    //案件受理人电话
	Is_Urgent            string  `protobuf:"bytes,37,opt,name=Is_Urgent,json=IsUrgent,proto3" json:"Is_Urgent,omitempty"`                                 //是否加急
	Is_Murder            string  `protobuf:"bytes,38,opt,name=Is_Murder,json=IsMurder,proto3" json:"Is_Murder,omitempty"`                                 //是否为命案(DG)
	Involve_Death        string  `protobuf:"bytes,39,opt,name=Involve_Death,json=InvolveDeath,proto3" json:"Involve_Death,omitempty"`                     //是否涉及人员死亡
	Death_Num            int64   `protobuf:"varint,40,opt,name=Death_Num,json=DeathNum,proto3" json:"Death_Num,omitempty"`                                //死亡人数
	Person_In_Charge     string  `protobuf:"bytes,41,opt,name=Person_In_Charge,json=PersonInCharge,proto3" json:"Person_In_Charge,omitempty"`             //案件负责人
	Pic_Duty             string  `protobuf:"bytes,42,opt,name=Pic_Duty,json=PicDuty,proto3" json:"Pic_Duty,omitempty"`                                    //案件负责人职务
	Pic_Phone            string  `protobuf:"bytes,43,opt,name=Pic_Phone,json=PicPhone,proto3" json:"Pic_Phone,omitempty"`                                 //案件负责人联系电话
	Pic_Certificate_Type string  `protobuf:"bytes,44,opt,name=Pic_Certificate_Type,json=PicCertificateType,proto3" json:"Pic_Certificate_Type,omitempty"` //案件负责人证件类型
	Pic_Certificate_No   string  `protobuf:"bytes,45,opt,name=Pic_Certificate_No,json=PicCertificateNo,proto3" json:"Pic_Certificate_No,omitempty"`       //案件负责人证件号(YN)
	Auditor              string  `protobuf:"bytes,46,opt,name=Auditor,proto3" json:"Auditor,omitempty"`                                                   //审核人
	Auditor_Phone        string  `protobuf:"bytes,47,opt,name=Auditor_Phone,json=AuditorPhone,proto3" json:"Auditor_Phone,omitempty"`                     //审核人电话
	Audit_Datetime       string  `protobuf:"bytes,48,opt,name=Audit_Datetime,json=AuditDatetime,proto3" json:"Audit_Datetime,omitempty"`                  //审核时间(YN)
	System_Case_No       string  `protobuf:"bytes,49,opt,name=System_Case_No,json=SystemCaseNo,proto3" json:"System_Case_No,omitempty"`                   //系统案件编号
	Case_Serial_No       string  `protobuf:"bytes,50,opt,name=Case_Serial_No,json=CaseSerialNo,proto3" json:"Case_Serial_No,omitempty"`                   //案件流水号(KM)
	Is_Registered        string  `protobuf:"bytes,51,opt,name=Is_Registered,json=IsRegistered,proto3" json:"Is_Registered,omitempty"`                     //是否立案(DG)
	Va                   string  `protobuf:"bytes,52,opt,name=Va,proto3" json:"Va,omitempty"`                                                             //通用字段
	Scenecode            string  `protobuf:"bytes,53,opt,name=Scenecode,proto3" json:"Scenecode,omitempty"`                                               //现勘编号
	Caseacceptcode       string  `protobuf:"bytes,54,opt,name=Caseacceptcode,proto3" json:"Caseacceptcode,omitempty"`                                     //接警编号
	Ext_Id               string  `protobuf:"bytes,55,opt,name=Ext_Id,json=ExtId,proto3" json:"Ext_Id,omitempty"`                                          //外部系统主键
	Internal_Match       string  `protobuf:"bytes,56,opt,name=Internal_Match,json=InternalMatch,proto3" json:"Internal_Match,omitempty"`                  //是否本案比中，‘0’：未比中，‘1’：比中
	Urgent_Reason        string  `protobuf:"bytes,57,opt,name=Urgent_Reason,json=UrgentReason,proto3" json:"Urgent_Reason,omitempty"`                     //加急原因
	Local_Store_Datetime string  `protobuf:"bytes,58,opt,name=Local_Store_Datetime,json=LocalStoreDatetime,proto3" json:"Local_Store_Datetime,omitempty"` //本地存储时间
	Tag                  *TagBiz `protobuf:"bytes,60,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *CaseInfo) Reset() {
	*x = CaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseInfo) ProtoMessage() {}

func (x *CaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseInfo.ProtoReflect.Descriptor instead.
func (*CaseInfo) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{2}
}

func (x *CaseInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CaseInfo) GetInit_Server_No() string {
	if x != nil {
		return x.Init_Server_No
	}
	return ""
}

func (x *CaseInfo) GetLab_Id() string {
	if x != nil {
		return x.Lab_Id
	}
	return ""
}

func (x *CaseInfo) GetCase_No() string {
	if x != nil {
		return x.Case_No
	}
	return ""
}

func (x *CaseInfo) GetCase_Name() string {
	if x != nil {
		return x.Case_Name
	}
	return ""
}

func (x *CaseInfo) GetScene_Regionalism() string {
	if x != nil {
		return x.Scene_Regionalism
	}
	return ""
}

func (x *CaseInfo) GetScene_Place() string {
	if x != nil {
		return x.Scene_Place
	}
	return ""
}

func (x *CaseInfo) GetOccurrence_Datetime() string {
	if x != nil {
		return x.Occurrence_Datetime
	}
	return ""
}

func (x *CaseInfo) GetCase_Level() string {
	if x != nil {
		return x.Case_Level
	}
	return ""
}

func (x *CaseInfo) GetCase_Type() string {
	if x != nil {
		return x.Case_Type
	}
	return ""
}

func (x *CaseInfo) GetCase_Property() string {
	if x != nil {
		return x.Case_Property
	}
	return ""
}

func (x *CaseInfo) GetHarm_Level() string {
	if x != nil {
		return x.Harm_Level
	}
	return ""
}

func (x *CaseInfo) GetScene_Area_Type() string {
	if x != nil {
		return x.Scene_Area_Type
	}
	return ""
}

func (x *CaseInfo) GetCase_Info_Origin() string {
	if x != nil {
		return x.Case_Info_Origin
	}
	return ""
}

func (x *CaseInfo) GetCase_Brief() string {
	if x != nil {
		return x.Case_Brief
	}
	return ""
}

func (x *CaseInfo) GetCase_Status() string {
	if x != nil {
		return x.Case_Status
	}
	return ""
}

func (x *CaseInfo) GetDelete_Flag() int64 {
	if x != nil {
		return x.Delete_Flag
	}
	return 0
}

func (x *CaseInfo) GetTransfer_Flag() int64 {
	if x != nil {
		return x.Transfer_Flag
	}
	return 0
}

func (x *CaseInfo) GetTransfer_User() string {
	if x != nil {
		return x.Transfer_User
	}
	return ""
}

func (x *CaseInfo) GetTransfer_Datetime() string {
	if x != nil {
		return x.Transfer_Datetime
	}
	return ""
}

func (x *CaseInfo) GetIdentify_Flag() int64 {
	if x != nil {
		return x.Identify_Flag
	}
	return 0
}

func (x *CaseInfo) GetIdentify_Role() string {
	if x != nil {
		return x.Identify_Role
	}
	return ""
}

func (x *CaseInfo) GetData_Source() string {
	if x != nil {
		return x.Data_Source
	}
	return ""
}

func (x *CaseInfo) GetData_Level() int64 {
	if x != nil {
		return x.Data_Level
	}
	return 0
}

func (x *CaseInfo) GetPhy_Evidence_Flag() int64 {
	if x != nil {
		return x.Phy_Evidence_Flag
	}
	return 0
}

func (x *CaseInfo) GetReserve2() string {
	if x != nil {
		return x.Reserve2
	}
	return ""
}

func (x *CaseInfo) GetReserve3() string {
	if x != nil {
		return x.Reserve3
	}
	return ""
}

func (x *CaseInfo) GetReserve4() string {
	if x != nil {
		return x.Reserve4
	}
	return ""
}

func (x *CaseInfo) GetReserve5() string {
	if x != nil {
		return x.Reserve5
	}
	return ""
}

func (x *CaseInfo) GetReserve6() string {
	if x != nil {
		return x.Reserve6
	}
	return ""
}

func (x *CaseInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CaseInfo) GetCreate_Datetime() string {
	if x != nil {
		return x.Create_Datetime
	}
	return ""
}

func (x *CaseInfo) GetCreate_User() string {
	if x != nil {
		return x.Create_User
	}
	return ""
}

func (x *CaseInfo) GetUpdate_Datetime() string {
	if x != nil {
		return x.Update_Datetime
	}
	return ""
}

func (x *CaseInfo) GetUpdate_User() string {
	if x != nil {
		return x.Update_User
	}
	return ""
}

func (x *CaseInfo) GetCase_Version3_No() string {
	if x != nil {
		return x.Case_Version3_No
	}
	return ""
}

func (x *CaseInfo) GetCase_Acceptor_Phone() string {
	if x != nil {
		return x.Case_Acceptor_Phone
	}
	return ""
}

func (x *CaseInfo) GetIs_Urgent() string {
	if x != nil {
		return x.Is_Urgent
	}
	return ""
}

func (x *CaseInfo) GetIs_Murder() string {
	if x != nil {
		return x.Is_Murder
	}
	return ""
}

func (x *CaseInfo) GetInvolve_Death() string {
	if x != nil {
		return x.Involve_Death
	}
	return ""
}

func (x *CaseInfo) GetDeath_Num() int64 {
	if x != nil {
		return x.Death_Num
	}
	return 0
}

func (x *CaseInfo) GetPerson_In_Charge() string {
	if x != nil {
		return x.Person_In_Charge
	}
	return ""
}

func (x *CaseInfo) GetPic_Duty() string {
	if x != nil {
		return x.Pic_Duty
	}
	return ""
}

func (x *CaseInfo) GetPic_Phone() string {
	if x != nil {
		return x.Pic_Phone
	}
	return ""
}

func (x *CaseInfo) GetPic_Certificate_Type() string {
	if x != nil {
		return x.Pic_Certificate_Type
	}
	return ""
}

func (x *CaseInfo) GetPic_Certificate_No() string {
	if x != nil {
		return x.Pic_Certificate_No
	}
	return ""
}

func (x *CaseInfo) GetAuditor() string {
	if x != nil {
		return x.Auditor
	}
	return ""
}

func (x *CaseInfo) GetAuditor_Phone() string {
	if x != nil {
		return x.Auditor_Phone
	}
	return ""
}

func (x *CaseInfo) GetAudit_Datetime() string {
	if x != nil {
		return x.Audit_Datetime
	}
	return ""
}

func (x *CaseInfo) GetSystem_Case_No() string {
	if x != nil {
		return x.System_Case_No
	}
	return ""
}

func (x *CaseInfo) GetCase_Serial_No() string {
	if x != nil {
		return x.Case_Serial_No
	}
	return ""
}

func (x *CaseInfo) GetIs_Registered() string {
	if x != nil {
		return x.Is_Registered
	}
	return ""
}

func (x *CaseInfo) GetVa() string {
	if x != nil {
		return x.Va
	}
	return ""
}

func (x *CaseInfo) GetScenecode() string {
	if x != nil {
		return x.Scenecode
	}
	return ""
}

func (x *CaseInfo) GetCaseacceptcode() string {
	if x != nil {
		return x.Caseacceptcode
	}
	return ""
}

func (x *CaseInfo) GetExt_Id() string {
	if x != nil {
		return x.Ext_Id
	}
	return ""
}

func (x *CaseInfo) GetInternal_Match() string {
	if x != nil {
		return x.Internal_Match
	}
	return ""
}

func (x *CaseInfo) GetUrgent_Reason() string {
	if x != nil {
		return x.Urgent_Reason
	}
	return ""
}

func (x *CaseInfo) GetLocal_Store_Datetime() string {
	if x != nil {
		return x.Local_Store_Datetime
	}
	return ""
}

func (x *CaseInfo) GetTag() *TagBiz {
	if x != nil {
		return x.Tag
	}
	return nil
}

// 事件
type EventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                  //主键ID
	InitServerNo       string  `protobuf:"bytes,2,opt,name=InitServerNo,proto3" json:"InitServerNo,omitempty"`              //原始服务器编号
	LabId              string  `protobuf:"bytes,3,opt,name=LabId,proto3" json:"LabId,omitempty"`                            //实验室ID
	EventName          string  `protobuf:"bytes,4,opt,name=EventName,proto3" json:"EventName,omitempty"`                    //事件名称
	EventNo            string  `protobuf:"bytes,5,opt,name=EventNo,proto3" json:"EventNo,omitempty"`                        //事件编号
	EventSummary       string  `protobuf:"bytes,6,opt,name=EventSummary,proto3" json:"EventSummary,omitempty"`              //简要描述
	DeleteFlag         int64   `protobuf:"varint,7,opt,name=DeleteFlag,proto3" json:"DeleteFlag,omitempty"`                 //删除标识
	TransferFlag       int64   `protobuf:"varint,8,opt,name=TransferFlag,proto3" json:"TransferFlag,omitempty"`             //上报标识，0不上报，1待上报，2成功，3等待重试，4错误，5正在上报
	TransferUser       string  `protobuf:"bytes,9,opt,name=TransferUser,proto3" json:"TransferUser,omitempty"`              //上报人
	TransferDatetime   string  `protobuf:"bytes,10,opt,name=TransferDatetime,proto3" json:"TransferDatetime,omitempty"`     //上报时间
	DataSource         string  `protobuf:"bytes,11,opt,name=DataSource,proto3" json:"DataSource,omitempty"`                 //数据来源
	DataLevel          int64   `protobuf:"varint,12,opt,name=DataLevel,proto3" json:"DataLevel,omitempty"`                  //数据级别
	Reserve1           string  `protobuf:"bytes,13,opt,name=Reserve1,proto3" json:"Reserve1,omitempty"`                     //备用字段1
	Reserve2           string  `protobuf:"bytes,14,opt,name=Reserve2,proto3" json:"Reserve2,omitempty"`                     //备用字段2
	Reserve3           string  `protobuf:"bytes,15,opt,name=Reserve3,proto3" json:"Reserve3,omitempty"`                     //备用字段3
	Reserve4           string  `protobuf:"bytes,16,opt,name=Reserve4,proto3" json:"Reserve4,omitempty"`                     //备用字段4
	Reserve5           string  `protobuf:"bytes,17,opt,name=Reserve5,proto3" json:"Reserve5,omitempty"`                     //备用字段5
	Reserve6           string  `protobuf:"bytes,18,opt,name=Reserve6,proto3" json:"Reserve6,omitempty"`                     //备用字段6
	Remark             string  `protobuf:"bytes,19,opt,name=Remark,proto3" json:"Remark,omitempty"`                         //备注
	CreateUser         string  `protobuf:"bytes,20,opt,name=CreateUser,proto3" json:"CreateUser,omitempty"`                 //创建人
	CreateDatetime     string  `protobuf:"bytes,21,opt,name=CreateDatetime,proto3" json:"CreateDatetime,omitempty"`         //创建时间
	UpdateUser         string  `protobuf:"bytes,22,opt,name=UpdateUser,proto3" json:"UpdateUser,omitempty"`                 //更新人
	UpdateDatetime     string  `protobuf:"bytes,23,opt,name=UpdateDatetime,proto3" json:"UpdateDatetime,omitempty"`         //更新时间
	ExtId              string  `protobuf:"bytes,24,opt,name=ExtId,proto3" json:"ExtId,omitempty"`                           //外部系统主键
	InternalMatch      string  `protobuf:"bytes,25,opt,name=InternalMatch,proto3" json:"InternalMatch,omitempty"`           //是否本案比中，‘0’：未比中，‘1’：比中
	LocalStoreDatetime string  `protobuf:"bytes,26,opt,name=LocalStoreDatetime,proto3" json:"LocalStoreDatetime,omitempty"` //本地存储时间
	Tag                *TagBiz `protobuf:"bytes,27,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *EventInfo) Reset() {
	*x = EventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInfo) ProtoMessage() {}

func (x *EventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInfo.ProtoReflect.Descriptor instead.
func (*EventInfo) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{3}
}

func (x *EventInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventInfo) GetInitServerNo() string {
	if x != nil {
		return x.InitServerNo
	}
	return ""
}

func (x *EventInfo) GetLabId() string {
	if x != nil {
		return x.LabId
	}
	return ""
}

func (x *EventInfo) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *EventInfo) GetEventNo() string {
	if x != nil {
		return x.EventNo
	}
	return ""
}

func (x *EventInfo) GetEventSummary() string {
	if x != nil {
		return x.EventSummary
	}
	return ""
}

func (x *EventInfo) GetDeleteFlag() int64 {
	if x != nil {
		return x.DeleteFlag
	}
	return 0
}

func (x *EventInfo) GetTransferFlag() int64 {
	if x != nil {
		return x.TransferFlag
	}
	return 0
}

func (x *EventInfo) GetTransferUser() string {
	if x != nil {
		return x.TransferUser
	}
	return ""
}

func (x *EventInfo) GetTransferDatetime() string {
	if x != nil {
		return x.TransferDatetime
	}
	return ""
}

func (x *EventInfo) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *EventInfo) GetDataLevel() int64 {
	if x != nil {
		return x.DataLevel
	}
	return 0
}

func (x *EventInfo) GetReserve1() string {
	if x != nil {
		return x.Reserve1
	}
	return ""
}

func (x *EventInfo) GetReserve2() string {
	if x != nil {
		return x.Reserve2
	}
	return ""
}

func (x *EventInfo) GetReserve3() string {
	if x != nil {
		return x.Reserve3
	}
	return ""
}

func (x *EventInfo) GetReserve4() string {
	if x != nil {
		return x.Reserve4
	}
	return ""
}

func (x *EventInfo) GetReserve5() string {
	if x != nil {
		return x.Reserve5
	}
	return ""
}

func (x *EventInfo) GetReserve6() string {
	if x != nil {
		return x.Reserve6
	}
	return ""
}

func (x *EventInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *EventInfo) GetCreateUser() string {
	if x != nil {
		return x.CreateUser
	}
	return ""
}

func (x *EventInfo) GetCreateDatetime() string {
	if x != nil {
		return x.CreateDatetime
	}
	return ""
}

func (x *EventInfo) GetUpdateUser() string {
	if x != nil {
		return x.UpdateUser
	}
	return ""
}

func (x *EventInfo) GetUpdateDatetime() string {
	if x != nil {
		return x.UpdateDatetime
	}
	return ""
}

func (x *EventInfo) GetExtId() string {
	if x != nil {
		return x.ExtId
	}
	return ""
}

func (x *EventInfo) GetInternalMatch() string {
	if x != nil {
		return x.InternalMatch
	}
	return ""
}

func (x *EventInfo) GetLocalStoreDatetime() string {
	if x != nil {
		return x.LocalStoreDatetime
	}
	return ""
}

func (x *EventInfo) GetTag() *TagBiz {
	if x != nil {
		return x.Tag
	}
	return nil
}

// 鉴定文书表
type IdentificationReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                        //ID
	InitServerNo          string  `protobuf:"bytes,2,opt,name=InitServerNo,proto3" json:"InitServerNo,omitempty"`                    //原始服务器编号
	LabId                 string  `protobuf:"bytes,3,opt,name=LabId,proto3" json:"LabId,omitempty"`                                  //实验室ID
	ObjectId              string  `protobuf:"bytes,4,opt,name=ObjectId,proto3" json:"ObjectId,omitempty"`                            //案件id/委托id等依据文书类型而定
	ReportNo              string  `protobuf:"bytes,5,opt,name=ReportNo,proto3" json:"ReportNo,omitempty"`                            //文件编号
	ReportName            string  `protobuf:"bytes,6,opt,name=ReportName,proto3" json:"ReportName,omitempty"`                        //文书名称
	ReportType            string  `protobuf:"bytes,7,opt,name=ReportType,proto3" json:"ReportType,omitempty"`                        //文书类型
	SaveType              string  `protobuf:"bytes,8,opt,name=SaveType,proto3" json:"SaveType,omitempty"`                            //保存方式
	FilePath              string  `protobuf:"bytes,9,opt,name=FilePath,proto3" json:"FilePath,omitempty"`                            //文件路径
	AttachmentId          string  `protobuf:"bytes,10,opt,name=AttachmentId,proto3" json:"AttachmentId,omitempty"`                   //附件ID
	IssueBy               string  `protobuf:"bytes,11,opt,name=IssueBy,proto3" json:"IssueBy,omitempty"`                             //签发人
	IssueDate             string  `protobuf:"bytes,12,opt,name=IssueDate,proto3" json:"IssueDate,omitempty"`                         //签发时间
	ReviewBy              string  `protobuf:"bytes,13,opt,name=ReviewBy,proto3" json:"ReviewBy,omitempty"`                           //审核人
	ReviewStatus          string  `protobuf:"bytes,14,opt,name=ReviewStatus,proto3" json:"ReviewStatus,omitempty"`                   //审核状态
	ReviewDate            string  `protobuf:"bytes,15,opt,name=ReviewDate,proto3" json:"ReviewDate,omitempty"`                       //审核时间
	ReceiveDate           string  `protobuf:"bytes,16,opt,name=ReceiveDate,proto3" json:"ReceiveDate,omitempty"`                     //领取时间
	IssueMode             string  `protobuf:"bytes,17,opt,name=IssueMode,proto3" json:"IssueMode,omitempty"`                         //鉴定书发放方式
	ReceiveAgency         string  `protobuf:"bytes,18,opt,name=ReceiveAgency,proto3" json:"ReceiveAgency,omitempty"`                 //领取者单位
	Receiver              string  `protobuf:"bytes,19,opt,name=Receiver,proto3" json:"Receiver,omitempty"`                           //领取者姓名
	ReceiverCertificateNo string  `protobuf:"bytes,20,opt,name=ReceiverCertificateNo,proto3" json:"ReceiverCertificateNo,omitempty"` //领取者证件号码
	Phone                 string  `protobuf:"bytes,21,opt,name=Phone,proto3" json:"Phone,omitempty"`                                 //领取者联系方式
	DeleteFlag            int64   `protobuf:"varint,22,opt,name=DeleteFlag,proto3" json:"DeleteFlag,omitempty"`                      //删除标识
	Remark                string  `protobuf:"bytes,23,opt,name=Remark,proto3" json:"Remark,omitempty"`                               //备注
	DataSource            string  `protobuf:"bytes,24,opt,name=DataSource,proto3" json:"DataSource,omitempty"`                       //数据来源
	DataLevel             int64   `protobuf:"varint,25,opt,name=DataLevel,proto3" json:"DataLevel,omitempty"`                        //数据级别
	ReplacementNo         int64   `protobuf:"varint,26,opt,name=ReplacementNo,proto3" json:"ReplacementNo,omitempty"`                //补发份数
	CreateUser            string  `protobuf:"bytes,27,opt,name=CreateUser,proto3" json:"CreateUser,omitempty"`                       //创建人
	CreateDatetime        string  `protobuf:"bytes,28,opt,name=CreateDatetime,proto3" json:"CreateDatetime,omitempty"`               //创建时间
	UpdateUser            string  `protobuf:"bytes,29,opt,name=UpdateUser,proto3" json:"UpdateUser,omitempty"`                       //更新人
	UpdateDatetime        string  `protobuf:"bytes,30,opt,name=UpdateDatetime,proto3" json:"UpdateDatetime,omitempty"`               //更新时间
	Section               string  `protobuf:"bytes,31,opt,name=Section,proto3" json:"Section,omitempty"`                             //专业
	Tag                   *TagBiz `protobuf:"bytes,32,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *IdentificationReport) Reset() {
	*x = IdentificationReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentificationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentificationReport) ProtoMessage() {}

func (x *IdentificationReport) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentificationReport.ProtoReflect.Descriptor instead.
func (*IdentificationReport) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{4}
}

func (x *IdentificationReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdentificationReport) GetInitServerNo() string {
	if x != nil {
		return x.InitServerNo
	}
	return ""
}

func (x *IdentificationReport) GetLabId() string {
	if x != nil {
		return x.LabId
	}
	return ""
}

func (x *IdentificationReport) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *IdentificationReport) GetReportNo() string {
	if x != nil {
		return x.ReportNo
	}
	return ""
}

func (x *IdentificationReport) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

func (x *IdentificationReport) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

func (x *IdentificationReport) GetSaveType() string {
	if x != nil {
		return x.SaveType
	}
	return ""
}

func (x *IdentificationReport) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *IdentificationReport) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

func (x *IdentificationReport) GetIssueBy() string {
	if x != nil {
		return x.IssueBy
	}
	return ""
}

func (x *IdentificationReport) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *IdentificationReport) GetReviewBy() string {
	if x != nil {
		return x.ReviewBy
	}
	return ""
}

func (x *IdentificationReport) GetReviewStatus() string {
	if x != nil {
		return x.ReviewStatus
	}
	return ""
}

func (x *IdentificationReport) GetReviewDate() string {
	if x != nil {
		return x.ReviewDate
	}
	return ""
}

func (x *IdentificationReport) GetReceiveDate() string {
	if x != nil {
		return x.ReceiveDate
	}
	return ""
}

func (x *IdentificationReport) GetIssueMode() string {
	if x != nil {
		return x.IssueMode
	}
	return ""
}

func (x *IdentificationReport) GetReceiveAgency() string {
	if x != nil {
		return x.ReceiveAgency
	}
	return ""
}

func (x *IdentificationReport) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *IdentificationReport) GetReceiverCertificateNo() string {
	if x != nil {
		return x.ReceiverCertificateNo
	}
	return ""
}

func (x *IdentificationReport) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *IdentificationReport) GetDeleteFlag() int64 {
	if x != nil {
		return x.DeleteFlag
	}
	return 0
}

func (x *IdentificationReport) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *IdentificationReport) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *IdentificationReport) GetDataLevel() int64 {
	if x != nil {
		return x.DataLevel
	}
	return 0
}

func (x *IdentificationReport) GetReplacementNo() int64 {
	if x != nil {
		return x.ReplacementNo
	}
	return 0
}

func (x *IdentificationReport) GetCreateUser() string {
	if x != nil {
		return x.CreateUser
	}
	return ""
}

func (x *IdentificationReport) GetCreateDatetime() string {
	if x != nil {
		return x.CreateDatetime
	}
	return ""
}

func (x *IdentificationReport) GetUpdateUser() string {
	if x != nil {
		return x.UpdateUser
	}
	return ""
}

func (x *IdentificationReport) GetUpdateDatetime() string {
	if x != nil {
		return x.UpdateDatetime
	}
	return ""
}

func (x *IdentificationReport) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *IdentificationReport) GetTag() *TagBiz {
	if x != nil {
		return x.Tag
	}
	return nil
}

// 人员
type PersonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                          //主键ID
	ResidenceRegionalism   string  `protobuf:"bytes,2,opt,name=ResidenceRegionalism,proto3" json:"ResidenceRegionalism,omitempty"`      //现住址行政区划
	ResidenceAddr          string  `protobuf:"bytes,3,opt,name=ResidenceAddr,proto3" json:"ResidenceAddr,omitempty"`                    //现住址名称
	FingerprintNo          string  `protobuf:"bytes,4,opt,name=FingerprintNo,proto3" json:"FingerprintNo,omitempty"`                    //指纹编号
	BloodType              string  `protobuf:"bytes,5,opt,name=BloodType,proto3" json:"BloodType,omitempty"`                            //血型
	Height                 string  `protobuf:"bytes,6,opt,name=Height,proto3" json:"Height,omitempty"`                                  //身高
	BodilyForm             string  `protobuf:"bytes,7,opt,name=BodilyForm,proto3" json:"BodilyForm,omitempty"`                          //体型
	BirthDateFrom          string  `protobuf:"bytes,8,opt,name=BirthDateFrom,proto3" json:"BirthDateFrom,omitempty"`                    //出生日期（起）
	BirthDateTo            string  `protobuf:"bytes,9,opt,name=BirthDateTo,proto3" json:"BirthDateTo,omitempty"`                        //出生日期（止）
	RoughAge               string  `protobuf:"bytes,10,opt,name=RoughAge,proto3" json:"RoughAge,omitempty"`                             //大致年龄
	RoughlyBirthdate       string  `protobuf:"bytes,11,opt,name=RoughlyBirthdate,proto3" json:"RoughlyBirthdate,omitempty"`             //大致出生日期
	MissingType            string  `protobuf:"bytes,12,opt,name=MissingType,proto3" json:"MissingType,omitempty"`                       //失踪类型
	MissingTime            string  `protobuf:"bytes,13,opt,name=MissingTime,proto3" json:"MissingTime,omitempty"`                       //失踪时间
	MissingPlace           string  `protobuf:"bytes,14,opt,name=MissingPlace,proto3" json:"MissingPlace,omitempty"`                     //失踪地点
	ExtrinsicSign          string  `protobuf:"bytes,15,opt,name=ExtrinsicSign,proto3" json:"ExtrinsicSign,omitempty"`                   //体表标记
	SpecialSign            string  `protobuf:"bytes,16,opt,name=SpecialSign,proto3" json:"SpecialSign,omitempty"`                       //特殊特征
	InvolvedCaseName       string  `protobuf:"bytes,17,opt,name=InvolvedCaseName,proto3" json:"InvolvedCaseName,omitempty"`             //涉案名称
	InvolvedCaseNo         string  `protobuf:"bytes,18,opt,name=InvolvedCaseNo,proto3" json:"InvolvedCaseNo,omitempty"`                 //涉案编号
	CaseProperty           string  `protobuf:"bytes,19,opt,name=CaseProperty,proto3" json:"CaseProperty,omitempty"`                     //涉案性质
	PrisonType             string  `protobuf:"bytes,20,opt,name=PrisonType,proto3" json:"PrisonType,omitempty"`                         //关押地类型
	PrisonNo               string  `protobuf:"bytes,21,opt,name=PrisonNo,proto3" json:"PrisonNo,omitempty"`                             //科所队编号
	DeathFlag              int64   `protobuf:"varint,22,opt,name=DeathFlag,proto3" json:"DeathFlag,omitempty"`                          //死亡标识，1死亡，2健在
	DeleteFlag             int64   `protobuf:"varint,23,opt,name=DeleteFlag,proto3" json:"DeleteFlag,omitempty"`                        //删除标识
	IndexFlag              string  `protobuf:"bytes,24,opt,name=IndexFlag,proto3" json:"IndexFlag,omitempty"`                           //索引标识
	TransferFlag           int64   `protobuf:"varint,25,opt,name=TransferFlag,proto3" json:"TransferFlag,omitempty"`                    //上报标识，0不上报，1待上报，2成功，3等待重试，4错误，5正在上报
	TransferUser           string  `protobuf:"bytes,26,opt,name=TransferUser,proto3" json:"TransferUser,omitempty"`                     //上报人
	TransferDatetime       string  `protobuf:"bytes,27,opt,name=TransferDatetime,proto3" json:"TransferDatetime,omitempty"`             //上报时间
	DataSource             string  `protobuf:"bytes,28,opt,name=DataSource,proto3" json:"DataSource,omitempty"`                         //数据来源
	DataLevel              int64   `protobuf:"varint,29,opt,name=DataLevel,proto3" json:"DataLevel,omitempty"`                          //数据级别
	Reserve1               string  `protobuf:"bytes,30,opt,name=Reserve1,proto3" json:"Reserve1,omitempty"`                             //备用字段1
	Reserve2               string  `protobuf:"bytes,31,opt,name=Reserve2,proto3" json:"Reserve2,omitempty"`                             //备用字段2
	Reserve3               string  `protobuf:"bytes,32,opt,name=Reserve3,proto3" json:"Reserve3,omitempty"`                             //备用字段3
	Reserve4               string  `protobuf:"bytes,33,opt,name=Reserve4,proto3" json:"Reserve4,omitempty"`                             //备用字段4
	Reserve5               string  `protobuf:"bytes,34,opt,name=Reserve5,proto3" json:"Reserve5,omitempty"`                             //备用字段5
	Reserve6               string  `protobuf:"bytes,35,opt,name=Reserve6,proto3" json:"Reserve6,omitempty"`                             //备用字段6
	Remark                 string  `protobuf:"bytes,36,opt,name=Remark,proto3" json:"Remark,omitempty"`                                 //备注
	CreateUser             string  `protobuf:"bytes,37,opt,name=CreateUser,proto3" json:"CreateUser,omitempty"`                         //创建人
	CreateDatetime         string  `protobuf:"bytes,38,opt,name=CreateDatetime,proto3" json:"CreateDatetime,omitempty"`                 //创建时间
	UpdateUser             string  `protobuf:"bytes,39,opt,name=UpdateUser,proto3" json:"UpdateUser,omitempty"`                         //更新人
	UpdateDatetime         string  `protobuf:"bytes,45,opt,name=UpdateDatetime,proto3" json:"UpdateDatetime,omitempty"`                 //更新时间
	PersonLabel            string  `protobuf:"bytes,40,opt,name=PersonLabel,proto3" json:"PersonLabel,omitempty"`                       //人员标签
	AbductType             string  `protobuf:"bytes,41,opt,name=AbductType,proto3" json:"AbductType,omitempty"`                         //被拐儿童类型
	IfSampling             int64   `protobuf:"varint,42,opt,name=IfSampling,proto3" json:"IfSampling,omitempty"`                        //是否在公安机关采过学样
	SamplingDatetime       string  `protobuf:"bytes,43,opt,name=SamplingDatetime,proto3" json:"SamplingDatetime,omitempty"`             //采样日期
	SamplingRegionalism    string  `protobuf:"bytes,44,opt,name=SamplingRegionalism,proto3" json:"SamplingRegionalism,omitempty"`       //采样单位
	IfTestDna              int64   `protobuf:"varint,46,opt,name=IfTestDna,proto3" json:"IfTestDna,omitempty"`                          //是否在公安机关检验DNA
	TestDatetime           string  `protobuf:"bytes,47,opt,name=TestDatetime,proto3" json:"TestDatetime,omitempty"`                     //检验日期
	TestRegionalism        string  `protobuf:"bytes,48,opt,name=TestRegionalism,proto3" json:"TestRegionalism,omitempty"`               //检验单位
	Unit                   string  `protobuf:"bytes,49,opt,name=Unit,proto3" json:"Unit,omitempty"`                                     //单位
	IsArrested             string  `protobuf:"bytes,50,opt,name=IsArrested,proto3" json:"IsArrested,omitempty"`                         //是否抓获(DG)
	ArrestDaettime         string  `protobuf:"bytes,51,opt,name=ArrestDaettime,proto3" json:"ArrestDaettime,omitempty"`                 //抓获时间(DG)
	IsOffender             string  `protobuf:"bytes,52,opt,name=IsOffender,proto3" json:"IsOffender,omitempty"`                         //是否为违法前科(KM)
	Va                     string  `protobuf:"bytes,53,opt,name=Va,proto3" json:"Va,omitempty"`                                         //通用字段
	ExtId                  string  `protobuf:"bytes,54,opt,name=ExtId,proto3" json:"ExtId,omitempty"`                                   //外部系统主键
	FamilyNo               string  `protobuf:"bytes,55,opt,name=FamilyNo,proto3" json:"FamilyNo,omitempty"`                             //家系编号
	FamilyName             string  `protobuf:"bytes,56,opt,name=FamilyName,proto3" json:"FamilyName,omitempty"`                         //家系名称
	LocalStoreDatetime     string  `protobuf:"bytes,57,opt,name=LocalStoreDatetime,proto3" json:"LocalStoreDatetime,omitempty"`         //上报更新时间
	LocalCreateDatetime    string  `protobuf:"bytes,58,opt,name=LocalCreateDatetime,proto3" json:"LocalCreateDatetime,omitempty"`       //上报新增时间
	InitServerNo           string  `protobuf:"bytes,59,opt,name=InitServerNo,proto3" json:"InitServerNo,omitempty"`                     //原始服务器编号
	LabId                  string  `protobuf:"bytes,60,opt,name=LabId,proto3" json:"LabId,omitempty"`                                   //实验室ID
	ConsignmentId          string  `protobuf:"bytes,61,opt,name=ConsignmentId,proto3" json:"ConsignmentId,omitempty"`                   //委托ID
	ConsignOrgCode         string  `protobuf:"bytes,62,opt,name=ConsignOrgCode,proto3" json:"ConsignOrgCode,omitempty"`                 //委托单位编号
	InputCategory          string  `protobuf:"bytes,63,opt,name=InputCategory,proto3" json:"InputCategory,omitempty"`                   //鉴定类别
	DbCategory             string  `protobuf:"bytes,64,opt,name=DbCategory,proto3" json:"DbCategory,omitempty"`                         //建库类别
	SubCategory            string  `protobuf:"bytes,65,opt,name=SubCategory,proto3" json:"SubCategory,omitempty"`                       //
	PersonNo               string  `protobuf:"bytes,66,opt,name=PersonNo,proto3" json:"PersonNo,omitempty"`                             //人员编号
	PersonName             string  `protobuf:"bytes,67,opt,name=PersonName,proto3" json:"PersonName,omitempty"`                         //人员名称
	GenerateMode           string  `protobuf:"bytes,68,opt,name=GenerateMode,proto3" json:"GenerateMode,omitempty"`                     //对象生成模式（手工、自建）
	Alias                  string  `protobuf:"bytes,69,opt,name=Alias,proto3" json:"Alias,omitempty"`                                   //别名、绰号
	Gender                 string  `protobuf:"bytes,70,opt,name=Gender,proto3" json:"Gender,omitempty"`                                 //性别
	BirthDatetime          string  `protobuf:"bytes,71,opt,name=BirthDatetime,proto3" json:"BirthDatetime,omitempty"`                   //出生日期
	Age                    int64   `protobuf:"varint,72,opt,name=Age,proto3" json:"Age,omitempty"`                                      //年龄
	IdCardNo               string  `protobuf:"bytes,73,opt,name=IdCardNo,proto3" json:"IdCardNo,omitempty"`                             //身份证号
	CertificateType        string  `protobuf:"bytes,74,opt,name=CertificateType,proto3" json:"CertificateType,omitempty"`               //其他证件类型
	CertificateNo          string  `protobuf:"bytes,75,opt,name=CertificateNo,proto3" json:"CertificateNo,omitempty"`                   //其他证件号码
	Race                   string  `protobuf:"bytes,76,opt,name=Race,proto3" json:"Race,omitempty"`                                     //民族
	Nationality            string  `protobuf:"bytes,77,opt,name=Nationality,proto3" json:"Nationality,omitempty"`                       //国籍
	MobilePhone            string  `protobuf:"bytes,78,opt,name=MobilePhone,proto3" json:"MobilePhone,omitempty"`                       //移动电话
	HomePhone              string  `protobuf:"bytes,79,opt,name=HomePhone,proto3" json:"HomePhone,omitempty"`                           //家庭电话
	Email                  string  `protobuf:"bytes,80,opt,name=Email,proto3" json:"Email,omitempty"`                                   //电子邮件
	EducationLevel         string  `protobuf:"bytes,81,opt,name=EducationLevel,proto3" json:"EducationLevel,omitempty"`                 //教育程度
	Identity               string  `protobuf:"bytes,82,opt,name=Identity,proto3" json:"Identity,omitempty"`                             //身份
	Occupation             string  `protobuf:"bytes,83,opt,name=Occupation,proto3" json:"Occupation,omitempty"`                         //职业
	NativePlaceRegionalism string  `protobuf:"bytes,84,opt,name=NativePlaceRegionalism,proto3" json:"NativePlaceRegionalism,omitempty"` //户籍地行政区划
	NativePlaceAddr        string  `protobuf:"bytes,85,opt,name=NativePlaceAddr,proto3" json:"NativePlaceAddr,omitempty"`               //户籍地名称
	Section                string  `protobuf:"bytes,86,opt,name=Section,proto3" json:"Section,omitempty"`                               //专业
	Tag                    *TagBiz `protobuf:"bytes,87,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *PersonInfo) Reset() {
	*x = PersonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonInfo) ProtoMessage() {}

func (x *PersonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonInfo.ProtoReflect.Descriptor instead.
func (*PersonInfo) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{5}
}

func (x *PersonInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PersonInfo) GetResidenceRegionalism() string {
	if x != nil {
		return x.ResidenceRegionalism
	}
	return ""
}

func (x *PersonInfo) GetResidenceAddr() string {
	if x != nil {
		return x.ResidenceAddr
	}
	return ""
}

func (x *PersonInfo) GetFingerprintNo() string {
	if x != nil {
		return x.FingerprintNo
	}
	return ""
}

func (x *PersonInfo) GetBloodType() string {
	if x != nil {
		return x.BloodType
	}
	return ""
}

func (x *PersonInfo) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *PersonInfo) GetBodilyForm() string {
	if x != nil {
		return x.BodilyForm
	}
	return ""
}

func (x *PersonInfo) GetBirthDateFrom() string {
	if x != nil {
		return x.BirthDateFrom
	}
	return ""
}

func (x *PersonInfo) GetBirthDateTo() string {
	if x != nil {
		return x.BirthDateTo
	}
	return ""
}

func (x *PersonInfo) GetRoughAge() string {
	if x != nil {
		return x.RoughAge
	}
	return ""
}

func (x *PersonInfo) GetRoughlyBirthdate() string {
	if x != nil {
		return x.RoughlyBirthdate
	}
	return ""
}

func (x *PersonInfo) GetMissingType() string {
	if x != nil {
		return x.MissingType
	}
	return ""
}

func (x *PersonInfo) GetMissingTime() string {
	if x != nil {
		return x.MissingTime
	}
	return ""
}

func (x *PersonInfo) GetMissingPlace() string {
	if x != nil {
		return x.MissingPlace
	}
	return ""
}

func (x *PersonInfo) GetExtrinsicSign() string {
	if x != nil {
		return x.ExtrinsicSign
	}
	return ""
}

func (x *PersonInfo) GetSpecialSign() string {
	if x != nil {
		return x.SpecialSign
	}
	return ""
}

func (x *PersonInfo) GetInvolvedCaseName() string {
	if x != nil {
		return x.InvolvedCaseName
	}
	return ""
}

func (x *PersonInfo) GetInvolvedCaseNo() string {
	if x != nil {
		return x.InvolvedCaseNo
	}
	return ""
}

func (x *PersonInfo) GetCaseProperty() string {
	if x != nil {
		return x.CaseProperty
	}
	return ""
}

func (x *PersonInfo) GetPrisonType() string {
	if x != nil {
		return x.PrisonType
	}
	return ""
}

func (x *PersonInfo) GetPrisonNo() string {
	if x != nil {
		return x.PrisonNo
	}
	return ""
}

func (x *PersonInfo) GetDeathFlag() int64 {
	if x != nil {
		return x.DeathFlag
	}
	return 0
}

func (x *PersonInfo) GetDeleteFlag() int64 {
	if x != nil {
		return x.DeleteFlag
	}
	return 0
}

func (x *PersonInfo) GetIndexFlag() string {
	if x != nil {
		return x.IndexFlag
	}
	return ""
}

func (x *PersonInfo) GetTransferFlag() int64 {
	if x != nil {
		return x.TransferFlag
	}
	return 0
}

func (x *PersonInfo) GetTransferUser() string {
	if x != nil {
		return x.TransferUser
	}
	return ""
}

func (x *PersonInfo) GetTransferDatetime() string {
	if x != nil {
		return x.TransferDatetime
	}
	return ""
}

func (x *PersonInfo) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *PersonInfo) GetDataLevel() int64 {
	if x != nil {
		return x.DataLevel
	}
	return 0
}

func (x *PersonInfo) GetReserve1() string {
	if x != nil {
		return x.Reserve1
	}
	return ""
}

func (x *PersonInfo) GetReserve2() string {
	if x != nil {
		return x.Reserve2
	}
	return ""
}

func (x *PersonInfo) GetReserve3() string {
	if x != nil {
		return x.Reserve3
	}
	return ""
}

func (x *PersonInfo) GetReserve4() string {
	if x != nil {
		return x.Reserve4
	}
	return ""
}

func (x *PersonInfo) GetReserve5() string {
	if x != nil {
		return x.Reserve5
	}
	return ""
}

func (x *PersonInfo) GetReserve6() string {
	if x != nil {
		return x.Reserve6
	}
	return ""
}

func (x *PersonInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PersonInfo) GetCreateUser() string {
	if x != nil {
		return x.CreateUser
	}
	return ""
}

func (x *PersonInfo) GetCreateDatetime() string {
	if x != nil {
		return x.CreateDatetime
	}
	return ""
}

func (x *PersonInfo) GetUpdateUser() string {
	if x != nil {
		return x.UpdateUser
	}
	return ""
}

func (x *PersonInfo) GetUpdateDatetime() string {
	if x != nil {
		return x.UpdateDatetime
	}
	return ""
}

func (x *PersonInfo) GetPersonLabel() string {
	if x != nil {
		return x.PersonLabel
	}
	return ""
}

func (x *PersonInfo) GetAbductType() string {
	if x != nil {
		return x.AbductType
	}
	return ""
}

func (x *PersonInfo) GetIfSampling() int64 {
	if x != nil {
		return x.IfSampling
	}
	return 0
}

func (x *PersonInfo) GetSamplingDatetime() string {
	if x != nil {
		return x.SamplingDatetime
	}
	return ""
}

func (x *PersonInfo) GetSamplingRegionalism() string {
	if x != nil {
		return x.SamplingRegionalism
	}
	return ""
}

func (x *PersonInfo) GetIfTestDna() int64 {
	if x != nil {
		return x.IfTestDna
	}
	return 0
}

func (x *PersonInfo) GetTestDatetime() string {
	if x != nil {
		return x.TestDatetime
	}
	return ""
}

func (x *PersonInfo) GetTestRegionalism() string {
	if x != nil {
		return x.TestRegionalism
	}
	return ""
}

func (x *PersonInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *PersonInfo) GetIsArrested() string {
	if x != nil {
		return x.IsArrested
	}
	return ""
}

func (x *PersonInfo) GetArrestDaettime() string {
	if x != nil {
		return x.ArrestDaettime
	}
	return ""
}

func (x *PersonInfo) GetIsOffender() string {
	if x != nil {
		return x.IsOffender
	}
	return ""
}

func (x *PersonInfo) GetVa() string {
	if x != nil {
		return x.Va
	}
	return ""
}

func (x *PersonInfo) GetExtId() string {
	if x != nil {
		return x.ExtId
	}
	return ""
}

func (x *PersonInfo) GetFamilyNo() string {
	if x != nil {
		return x.FamilyNo
	}
	return ""
}

func (x *PersonInfo) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *PersonInfo) GetLocalStoreDatetime() string {
	if x != nil {
		return x.LocalStoreDatetime
	}
	return ""
}

func (x *PersonInfo) GetLocalCreateDatetime() string {
	if x != nil {
		return x.LocalCreateDatetime
	}
	return ""
}

func (x *PersonInfo) GetInitServerNo() string {
	if x != nil {
		return x.InitServerNo
	}
	return ""
}

func (x *PersonInfo) GetLabId() string {
	if x != nil {
		return x.LabId
	}
	return ""
}

func (x *PersonInfo) GetConsignmentId() string {
	if x != nil {
		return x.ConsignmentId
	}
	return ""
}

func (x *PersonInfo) GetConsignOrgCode() string {
	if x != nil {
		return x.ConsignOrgCode
	}
	return ""
}

func (x *PersonInfo) GetInputCategory() string {
	if x != nil {
		return x.InputCategory
	}
	return ""
}

func (x *PersonInfo) GetDbCategory() string {
	if x != nil {
		return x.DbCategory
	}
	return ""
}

func (x *PersonInfo) GetSubCategory() string {
	if x != nil {
		return x.SubCategory
	}
	return ""
}

func (x *PersonInfo) GetPersonNo() string {
	if x != nil {
		return x.PersonNo
	}
	return ""
}

func (x *PersonInfo) GetPersonName() string {
	if x != nil {
		return x.PersonName
	}
	return ""
}

func (x *PersonInfo) GetGenerateMode() string {
	if x != nil {
		return x.GenerateMode
	}
	return ""
}

func (x *PersonInfo) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *PersonInfo) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *PersonInfo) GetBirthDatetime() string {
	if x != nil {
		return x.BirthDatetime
	}
	return ""
}

func (x *PersonInfo) GetAge() int64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *PersonInfo) GetIdCardNo() string {
	if x != nil {
		return x.IdCardNo
	}
	return ""
}

func (x *PersonInfo) GetCertificateType() string {
	if x != nil {
		return x.CertificateType
	}
	return ""
}

func (x *PersonInfo) GetCertificateNo() string {
	if x != nil {
		return x.CertificateNo
	}
	return ""
}

func (x *PersonInfo) GetRace() string {
	if x != nil {
		return x.Race
	}
	return ""
}

func (x *PersonInfo) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *PersonInfo) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *PersonInfo) GetHomePhone() string {
	if x != nil {
		return x.HomePhone
	}
	return ""
}

func (x *PersonInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PersonInfo) GetEducationLevel() string {
	if x != nil {
		return x.EducationLevel
	}
	return ""
}

func (x *PersonInfo) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *PersonInfo) GetOccupation() string {
	if x != nil {
		return x.Occupation
	}
	return ""
}

func (x *PersonInfo) GetNativePlaceRegionalism() string {
	if x != nil {
		return x.NativePlaceRegionalism
	}
	return ""
}

func (x *PersonInfo) GetNativePlaceAddr() string {
	if x != nil {
		return x.NativePlaceAddr
	}
	return ""
}

func (x *PersonInfo) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *PersonInfo) GetTag() *TagBiz {
	if x != nil {
		return x.Tag
	}
	return nil
}

// 物证
type PhysicalEvidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                      //ID
	PhysicalEvidenceNo   string  `protobuf:"bytes,2,opt,name=PhysicalEvidenceNo,proto3" json:"PhysicalEvidenceNo,omitempty"`      //物证编号
	PhysicalEvidenceName string  `protobuf:"bytes,3,opt,name=PhysicalEvidenceName,proto3" json:"PhysicalEvidenceName,omitempty"`  //物证名称
	Description          string  `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`                    //特征描述
	TrustyFlag           int64   `protobuf:"varint,5,opt,name=TrustyFlag,proto3" json:"TrustyFlag,omitempty"`                     //可靠程度
	Utilization          string  `protobuf:"bytes,6,opt,name=Utilization,proto3" json:"Utilization,omitempty"`                    //利用情况
	Secrecy              string  `protobuf:"bytes,7,opt,name=Secrecy,proto3" json:"Secrecy,omitempty"`                            //密级
	TransferFlag         int64   `protobuf:"varint,8,opt,name=TransferFlag,proto3" json:"TransferFlag,omitempty"`                 //上报标识，0不上报，1待上报，2成功，3等待重试，4错误，5正在上报
	TransferUser         string  `protobuf:"bytes,9,opt,name=TransferUser,proto3" json:"TransferUser,omitempty"`                  //上报人
	TransferDatetime     string  `protobuf:"bytes,10,opt,name=TransferDatetime,proto3" json:"TransferDatetime,omitempty"`         //上报时间
	DeleteFlag           int64   `protobuf:"varint,11,opt,name=DeleteFlag,proto3" json:"DeleteFlag,omitempty"`                    //删除标识
	Reserve1             string  `protobuf:"bytes,12,opt,name=Reserve1,proto3" json:"Reserve1,omitempty"`                         //备用字段1
	Reserve2             string  `protobuf:"bytes,13,opt,name=Reserve2,proto3" json:"Reserve2,omitempty"`                         //备用字段2
	Reserve3             string  `protobuf:"bytes,14,opt,name=Reserve3,proto3" json:"Reserve3,omitempty"`                         //备用字段3
	Reserve4             string  `protobuf:"bytes,15,opt,name=Reserve4,proto3" json:"Reserve4,omitempty"`                         //备用字段4
	Reserve5             string  `protobuf:"bytes,16,opt,name=Reserve5,proto3" json:"Reserve5,omitempty"`                         //备用字段5
	Reserve6             string  `protobuf:"bytes,17,opt,name=Reserve6,proto3" json:"Reserve6,omitempty"`                         //备用字段6
	Remark               string  `protobuf:"bytes,18,opt,name=Remark,proto3" json:"Remark,omitempty"`                             //备注
	DataSource           string  `protobuf:"bytes,19,opt,name=DataSource,proto3" json:"DataSource,omitempty"`                     //数据来源
	DataLevel            int64   `protobuf:"varint,20,opt,name=DataLevel,proto3" json:"DataLevel,omitempty"`                      //数据级别
	CreateUser           string  `protobuf:"bytes,21,opt,name=CreateUser,proto3" json:"CreateUser,omitempty"`                     //创建人
	CreateDatetime       string  `protobuf:"bytes,22,opt,name=CreateDatetime,proto3" json:"CreateDatetime,omitempty"`             //创建时间
	UpdateUser           string  `protobuf:"bytes,23,opt,name=UpdateUser,proto3" json:"UpdateUser,omitempty"`                     //更新人
	UpdateDatetime       string  `protobuf:"bytes,24,opt,name=UpdateDatetime,proto3" json:"UpdateDatetime,omitempty"`             //更新时间
	ExtractDaettime      string  `protobuf:"bytes,25,opt,name=ExtractDaettime,proto3" json:"ExtractDaettime,omitempty"`           //检材提取时间
	PreExamineDesc       string  `protobuf:"bytes,26,opt,name=PreExamineDesc,proto3" json:"PreExamineDesc,omitempty"`             //预实验描述
	ConsignPurpose       string  `protobuf:"bytes,27,opt,name=ConsignPurpose,proto3" json:"ConsignPurpose,omitempty"`             //送检目的
	TypeExtraInfo        string  `protobuf:"bytes,28,opt,name=TypeExtraInfo,proto3" json:"TypeExtraInfo,omitempty"`               //类型附加信息
	SpecialDealOption    string  `protobuf:"bytes,29,opt,name=SpecialDealOption,proto3" json:"SpecialDealOption,omitempty"`       //特殊办理选项
	ExtractMethod        string  `protobuf:"bytes,30,opt,name=ExtractMethod,proto3" json:"ExtractMethod,omitempty"`               //提取方法
	PackageMethod        string  `protobuf:"bytes,31,opt,name=PackageMethod,proto3" json:"PackageMethod,omitempty"`               //包装方法
	SampleSerialNo       string  `protobuf:"bytes,32,opt,name=SampleSerialNo,proto3" json:"SampleSerialNo,omitempty"`             //检材流水号
	Va                   string  `protobuf:"bytes,33,opt,name=Va,proto3" json:"Va,omitempty"`                                     //通用字段
	ExtId                string  `protobuf:"bytes,34,opt,name=ExtId,proto3" json:"ExtId,omitempty"`                               //外部系统主键
	LocalStoreDatetime   string  `protobuf:"bytes,35,opt,name=LocalStoreDatetime,proto3" json:"LocalStoreDatetime,omitempty"`     //本地存储时间
	InitServerNo         string  `protobuf:"bytes,36,opt,name=InitServerNo,proto3" json:"InitServerNo,omitempty"`                 //原始服务器编号
	LabId                string  `protobuf:"bytes,37,opt,name=LabId,proto3" json:"LabId,omitempty"`                               //实验室序号
	ConsignmentId        string  `protobuf:"bytes,38,opt,name=ConsignmentId,proto3" json:"ConsignmentId,omitempty"`               //委托ID
	ConsignOrgCode       string  `protobuf:"bytes,39,opt,name=ConsignOrgCode,proto3" json:"ConsignOrgCode,omitempty"`             //委托单位编号
	PhysicalEvidenceType string  `protobuf:"bytes,40,opt,name=PhysicalEvidenceType,proto3" json:"PhysicalEvidenceType,omitempty"` //物证类型
	Section              string  `protobuf:"bytes,41,opt,name=Section,proto3" json:"Section,omitempty"`                           //专业
	Tag                  *TagBiz `protobuf:"bytes,42,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *PhysicalEvidence) Reset() {
	*x = PhysicalEvidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalEvidence) ProtoMessage() {}

func (x *PhysicalEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalEvidence.ProtoReflect.Descriptor instead.
func (*PhysicalEvidence) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{6}
}

func (x *PhysicalEvidence) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PhysicalEvidence) GetPhysicalEvidenceNo() string {
	if x != nil {
		return x.PhysicalEvidenceNo
	}
	return ""
}

func (x *PhysicalEvidence) GetPhysicalEvidenceName() string {
	if x != nil {
		return x.PhysicalEvidenceName
	}
	return ""
}

func (x *PhysicalEvidence) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PhysicalEvidence) GetTrustyFlag() int64 {
	if x != nil {
		return x.TrustyFlag
	}
	return 0
}

func (x *PhysicalEvidence) GetUtilization() string {
	if x != nil {
		return x.Utilization
	}
	return ""
}

func (x *PhysicalEvidence) GetSecrecy() string {
	if x != nil {
		return x.Secrecy
	}
	return ""
}

func (x *PhysicalEvidence) GetTransferFlag() int64 {
	if x != nil {
		return x.TransferFlag
	}
	return 0
}

func (x *PhysicalEvidence) GetTransferUser() string {
	if x != nil {
		return x.TransferUser
	}
	return ""
}

func (x *PhysicalEvidence) GetTransferDatetime() string {
	if x != nil {
		return x.TransferDatetime
	}
	return ""
}

func (x *PhysicalEvidence) GetDeleteFlag() int64 {
	if x != nil {
		return x.DeleteFlag
	}
	return 0
}

func (x *PhysicalEvidence) GetReserve1() string {
	if x != nil {
		return x.Reserve1
	}
	return ""
}

func (x *PhysicalEvidence) GetReserve2() string {
	if x != nil {
		return x.Reserve2
	}
	return ""
}

func (x *PhysicalEvidence) GetReserve3() string {
	if x != nil {
		return x.Reserve3
	}
	return ""
}

func (x *PhysicalEvidence) GetReserve4() string {
	if x != nil {
		return x.Reserve4
	}
	return ""
}

func (x *PhysicalEvidence) GetReserve5() string {
	if x != nil {
		return x.Reserve5
	}
	return ""
}

func (x *PhysicalEvidence) GetReserve6() string {
	if x != nil {
		return x.Reserve6
	}
	return ""
}

func (x *PhysicalEvidence) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PhysicalEvidence) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *PhysicalEvidence) GetDataLevel() int64 {
	if x != nil {
		return x.DataLevel
	}
	return 0
}

func (x *PhysicalEvidence) GetCreateUser() string {
	if x != nil {
		return x.CreateUser
	}
	return ""
}

func (x *PhysicalEvidence) GetCreateDatetime() string {
	if x != nil {
		return x.CreateDatetime
	}
	return ""
}

func (x *PhysicalEvidence) GetUpdateUser() string {
	if x != nil {
		return x.UpdateUser
	}
	return ""
}

func (x *PhysicalEvidence) GetUpdateDatetime() string {
	if x != nil {
		return x.UpdateDatetime
	}
	return ""
}

func (x *PhysicalEvidence) GetExtractDaettime() string {
	if x != nil {
		return x.ExtractDaettime
	}
	return ""
}

func (x *PhysicalEvidence) GetPreExamineDesc() string {
	if x != nil {
		return x.PreExamineDesc
	}
	return ""
}

func (x *PhysicalEvidence) GetConsignPurpose() string {
	if x != nil {
		return x.ConsignPurpose
	}
	return ""
}

func (x *PhysicalEvidence) GetTypeExtraInfo() string {
	if x != nil {
		return x.TypeExtraInfo
	}
	return ""
}

func (x *PhysicalEvidence) GetSpecialDealOption() string {
	if x != nil {
		return x.SpecialDealOption
	}
	return ""
}

func (x *PhysicalEvidence) GetExtractMethod() string {
	if x != nil {
		return x.ExtractMethod
	}
	return ""
}

func (x *PhysicalEvidence) GetPackageMethod() string {
	if x != nil {
		return x.PackageMethod
	}
	return ""
}

func (x *PhysicalEvidence) GetSampleSerialNo() string {
	if x != nil {
		return x.SampleSerialNo
	}
	return ""
}

func (x *PhysicalEvidence) GetVa() string {
	if x != nil {
		return x.Va
	}
	return ""
}

func (x *PhysicalEvidence) GetExtId() string {
	if x != nil {
		return x.ExtId
	}
	return ""
}

func (x *PhysicalEvidence) GetLocalStoreDatetime() string {
	if x != nil {
		return x.LocalStoreDatetime
	}
	return ""
}

func (x *PhysicalEvidence) GetInitServerNo() string {
	if x != nil {
		return x.InitServerNo
	}
	return ""
}

func (x *PhysicalEvidence) GetLabId() string {
	if x != nil {
		return x.LabId
	}
	return ""
}

func (x *PhysicalEvidence) GetConsignmentId() string {
	if x != nil {
		return x.ConsignmentId
	}
	return ""
}

func (x *PhysicalEvidence) GetConsignOrgCode() string {
	if x != nil {
		return x.ConsignOrgCode
	}
	return ""
}

func (x *PhysicalEvidence) GetPhysicalEvidenceType() string {
	if x != nil {
		return x.PhysicalEvidenceType
	}
	return ""
}

func (x *PhysicalEvidence) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *PhysicalEvidence) GetTag() *TagBiz {
	if x != nil {
		return x.Tag
	}
	return nil
}

// 分型
type SampleDnaGene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                    //ID
	TransferDatetime    string  `protobuf:"bytes,2,opt,name=TransferDatetime,proto3" json:"TransferDatetime,omitempty"`        //上报时间
	MatchedStatus       string  `protobuf:"bytes,3,opt,name=MatchedStatus,proto3" json:"MatchedStatus,omitempty"`              //比中状态
	MixFlag             int64   `protobuf:"varint,4,opt,name=MixFlag,proto3" json:"MixFlag,omitempty"`                         //混合标志
	Remark              string  `protobuf:"bytes,5,opt,name=Remark,proto3" json:"Remark,omitempty"`                            //备注
	DeleteFlag          int64   `protobuf:"varint,6,opt,name=DeleteFlag,proto3" json:"DeleteFlag,omitempty"`                   //删除标识
	DataSource          string  `protobuf:"bytes,7,opt,name=DataSource,proto3" json:"DataSource,omitempty"`                    //数据来源
	DataLevel           int64   `protobuf:"varint,8,opt,name=DataLevel,proto3" json:"DataLevel,omitempty"`                     //数据级别
	CreateUser          string  `protobuf:"bytes,9,opt,name=CreateUser,proto3" json:"CreateUser,omitempty"`                    //创建人
	CreateDatetime      string  `protobuf:"bytes,10,opt,name=CreateDatetime,proto3" json:"CreateDatetime,omitempty"`           //创建时间
	UpdateUser          string  `protobuf:"bytes,11,opt,name=UpdateUser,proto3" json:"UpdateUser,omitempty"`                   //更新人
	UpdateDatetime      string  `protobuf:"bytes,12,opt,name=UpdateDatetime,proto3" json:"UpdateDatetime,omitempty"`           //更新时间
	ExtId               string  `protobuf:"bytes,13,opt,name=ExtId,proto3" json:"ExtId,omitempty"`                             //外部系统主键
	InitServerNo        string  `protobuf:"bytes,14,opt,name=InitServerNo,proto3" json:"InitServerNo,omitempty"`               //原始服务器编号
	LabId               string  `protobuf:"bytes,15,opt,name=LabId,proto3" json:"LabId,omitempty"`                             //实验室ID
	SampleId            string  `protobuf:"bytes,16,opt,name=SampleId,proto3" json:"SampleId,omitempty"`                       //样本ID
	SampleFlag          string  `protobuf:"bytes,17,opt,name=SampleFlag,proto3" json:"SampleFlag,omitempty"`                   //样本标识（物证，人员）
	GeneType            string  `protobuf:"bytes,18,opt,name=GeneType,proto3" json:"GeneType,omitempty"`                       //基因类型
	ReagentKit          string  `protobuf:"bytes,19,opt,name=ReagentKit,proto3" json:"ReagentKit,omitempty"`                   //试剂盒
	AlleleCount         int64   `protobuf:"varint,20,opt,name=AlleleCount,proto3" json:"AlleleCount,omitempty"`                //有效位点数
	GeneInfo            string  `protobuf:"bytes,21,opt,name=GeneInfo,proto3" json:"GeneInfo,omitempty"`                       //GENE信息
	GeneData            string  `protobuf:"bytes,22,opt,name=GeneData,proto3" json:"GeneData,omitempty"`                       //GENE信息(带基因座)
	StoreFlag           int64   `protobuf:"varint,23,opt,name=StoreFlag,proto3" json:"StoreFlag,omitempty"`                    //入库标志
	StoreDatetime       string  `protobuf:"bytes,24,opt,name=StoreDatetime,proto3" json:"StoreDatetime,omitempty"`             //入库时间
	StoreUser           string  `protobuf:"bytes,25,opt,name=StoreUser,proto3" json:"StoreUser,omitempty"`                     //入库人
	ReviewStatus        string  `protobuf:"bytes,26,opt,name=ReviewStatus,proto3" json:"ReviewStatus,omitempty"`               //复核状态
	ReviewIdea          string  `protobuf:"bytes,27,opt,name=ReviewIdea,proto3" json:"ReviewIdea,omitempty"`                   //复核意见
	ReviewUser          string  `protobuf:"bytes,28,opt,name=ReviewUser,proto3" json:"ReviewUser,omitempty"`                   //复核人
	ReviewDatetime      string  `protobuf:"bytes,29,opt,name=ReviewDatetime,proto3" json:"ReviewDatetime,omitempty"`           //复核时间
	TransferFlag        int64   `protobuf:"varint,30,opt,name=TransferFlag,proto3" json:"TransferFlag,omitempty"`              //上报标识，0不上报，1待上报，2成功，3等待重试，4错误，5正在上报
	TransferUser        string  `protobuf:"bytes,31,opt,name=TransferUser,proto3" json:"TransferUser,omitempty"`               //上报人
	LocalStoreDatetime  string  `protobuf:"bytes,32,opt,name=LocalStoreDatetime,proto3" json:"LocalStoreDatetime,omitempty"`   //上报更新时间
	LocalCreateDatetime string  `protobuf:"bytes,33,opt,name=LocalCreateDatetime,proto3" json:"LocalCreateDatetime,omitempty"` //上报新增时间
	Va                  string  `protobuf:"bytes,34,opt,name=Va,proto3" json:"Va,omitempty"`                                   //备用字段
	GeneFile            string  `protobuf:"bytes,35,opt,name=GeneFile,proto3" json:"GeneFile,omitempty"`                       //分型文件
	Tag                 *TagBiz `protobuf:"bytes,36,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *SampleDnaGene) Reset() {
	*x = SampleDnaGene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleDnaGene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleDnaGene) ProtoMessage() {}

func (x *SampleDnaGene) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleDnaGene.ProtoReflect.Descriptor instead.
func (*SampleDnaGene) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{7}
}

func (x *SampleDnaGene) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SampleDnaGene) GetTransferDatetime() string {
	if x != nil {
		return x.TransferDatetime
	}
	return ""
}

func (x *SampleDnaGene) GetMatchedStatus() string {
	if x != nil {
		return x.MatchedStatus
	}
	return ""
}

func (x *SampleDnaGene) GetMixFlag() int64 {
	if x != nil {
		return x.MixFlag
	}
	return 0
}

func (x *SampleDnaGene) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SampleDnaGene) GetDeleteFlag() int64 {
	if x != nil {
		return x.DeleteFlag
	}
	return 0
}

func (x *SampleDnaGene) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *SampleDnaGene) GetDataLevel() int64 {
	if x != nil {
		return x.DataLevel
	}
	return 0
}

func (x *SampleDnaGene) GetCreateUser() string {
	if x != nil {
		return x.CreateUser
	}
	return ""
}

func (x *SampleDnaGene) GetCreateDatetime() string {
	if x != nil {
		return x.CreateDatetime
	}
	return ""
}

func (x *SampleDnaGene) GetUpdateUser() string {
	if x != nil {
		return x.UpdateUser
	}
	return ""
}

func (x *SampleDnaGene) GetUpdateDatetime() string {
	if x != nil {
		return x.UpdateDatetime
	}
	return ""
}

func (x *SampleDnaGene) GetExtId() string {
	if x != nil {
		return x.ExtId
	}
	return ""
}

func (x *SampleDnaGene) GetInitServerNo() string {
	if x != nil {
		return x.InitServerNo
	}
	return ""
}

func (x *SampleDnaGene) GetLabId() string {
	if x != nil {
		return x.LabId
	}
	return ""
}

func (x *SampleDnaGene) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *SampleDnaGene) GetSampleFlag() string {
	if x != nil {
		return x.SampleFlag
	}
	return ""
}

func (x *SampleDnaGene) GetGeneType() string {
	if x != nil {
		return x.GeneType
	}
	return ""
}

func (x *SampleDnaGene) GetReagentKit() string {
	if x != nil {
		return x.ReagentKit
	}
	return ""
}

func (x *SampleDnaGene) GetAlleleCount() int64 {
	if x != nil {
		return x.AlleleCount
	}
	return 0
}

func (x *SampleDnaGene) GetGeneInfo() string {
	if x != nil {
		return x.GeneInfo
	}
	return ""
}

func (x *SampleDnaGene) GetGeneData() string {
	if x != nil {
		return x.GeneData
	}
	return ""
}

func (x *SampleDnaGene) GetStoreFlag() int64 {
	if x != nil {
		return x.StoreFlag
	}
	return 0
}

func (x *SampleDnaGene) GetStoreDatetime() string {
	if x != nil {
		return x.StoreDatetime
	}
	return ""
}

func (x *SampleDnaGene) GetStoreUser() string {
	if x != nil {
		return x.StoreUser
	}
	return ""
}

func (x *SampleDnaGene) GetReviewStatus() string {
	if x != nil {
		return x.ReviewStatus
	}
	return ""
}

func (x *SampleDnaGene) GetReviewIdea() string {
	if x != nil {
		return x.ReviewIdea
	}
	return ""
}

func (x *SampleDnaGene) GetReviewUser() string {
	if x != nil {
		return x.ReviewUser
	}
	return ""
}

func (x *SampleDnaGene) GetReviewDatetime() string {
	if x != nil {
		return x.ReviewDatetime
	}
	return ""
}

func (x *SampleDnaGene) GetTransferFlag() int64 {
	if x != nil {
		return x.TransferFlag
	}
	return 0
}

func (x *SampleDnaGene) GetTransferUser() string {
	if x != nil {
		return x.TransferUser
	}
	return ""
}

func (x *SampleDnaGene) GetLocalStoreDatetime() string {
	if x != nil {
		return x.LocalStoreDatetime
	}
	return ""
}

func (x *SampleDnaGene) GetLocalCreateDatetime() string {
	if x != nil {
		return x.LocalCreateDatetime
	}
	return ""
}

func (x *SampleDnaGene) GetVa() string {
	if x != nil {
		return x.Va
	}
	return ""
}

func (x *SampleDnaGene) GetGeneFile() string {
	if x != nil {
		return x.GeneFile
	}
	return ""
}

func (x *SampleDnaGene) GetTag() *TagBiz {
	if x != nil {
		return x.Tag
	}
	return nil
}

// 样本
type SampleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                                                         //主键ID
	InitServerNo        string  `protobuf:"bytes,2,opt,name=InitServerNo,proto3" json:"InitServerNo,omitempty"`                                     //原始服务器编号
	LabId               string  `protobuf:"bytes,3,opt,name=LabId,proto3" json:"LabId,omitempty"`                                                   //实验室ID
	ConsignmentId       string  `protobuf:"bytes,4,opt,name=ConsignmentId,proto3" json:"ConsignmentId,omitempty"`                                   //委托ID
	ConsignOrgCode      string  `protobuf:"bytes,5,opt,name=ConsignOrgCode,proto3" json:"ConsignOrgCode,omitempty"`                                 //委托单位编号
	PhysicalEvidenceId  string  `protobuf:"bytes,6,opt,name=PhysicalEvidenceId,proto3" json:"PhysicalEvidenceId,omitempty"`                         //物证ID
	SampleNo            string  `protobuf:"bytes,7,opt,name=SampleNo,proto3" json:"SampleNo,omitempty"`                                             //样本系统编号
	SampleLabNo         string  `protobuf:"bytes,8,opt,name=SampleLabNo,proto3" json:"SampleLabNo,omitempty"`                                       //样本实验室编号
	SampleName          string  `protobuf:"bytes,9,opt,name=SampleName,proto3" json:"SampleName,omitempty"`                                         //样本名称
	SampleType          string  `protobuf:"bytes,10,opt,name=SampleType,proto3" json:"SampleType,omitempty"`                                        //样本类型
	Specialty           string  `protobuf:"bytes,11,opt,name=Specialty,proto3" json:"Specialty,omitempty"`                                          //专业
	Color               string  `protobuf:"bytes,12,opt,name=Color,proto3" json:"Color,omitempty"`                                                  //颜色
	Pattern             string  `protobuf:"bytes,13,opt,name=Pattern,proto3" json:"Pattern,omitempty"`                                              //式样
	Texture             string  `protobuf:"bytes,14,opt,name=Texture,proto3" json:"Texture,omitempty"`                                              //质地
	Shape               string  `protobuf:"bytes,15,opt,name=Shape,proto3" json:"Shape,omitempty"`                                                  //性状
	Amount              int64   `protobuf:"varint,16,opt,name=Amount,proto3" json:"Amount,omitempty"`                                               //数量
	EvidenceSize        string  `protobuf:"bytes,17,opt,name=EvidenceSize,proto3" json:"EvidenceSize,omitempty"`                                    //大小
	SpecialSign         string  `protobuf:"bytes,18,opt,name=SpecialSign,proto3" json:"SpecialSign,omitempty"`                                      //特殊标记
	IsCollect           int64   `protobuf:"varint,19,opt,name=IsCollect,proto3" json:"IsCollect,omitempty"`                                         //是否提取
	IsTest              int64   `protobuf:"varint,20,opt,name=IsTest,proto3" json:"IsTest,omitempty"`                                               //是否检验
	CollectMethod       string  `protobuf:"bytes,21,opt,name=CollectMethod,proto3" json:"CollectMethod,omitempty"`                                  //提取方法
	CollectPos          string  `protobuf:"bytes,22,opt,name=CollectPos,proto3" json:"CollectPos,omitempty"`                                        //提取部位
	CollectReason       string  `protobuf:"bytes,23,opt,name=CollectReason,proto3" json:"CollectReason,omitempty"`                                  //采集原因
	CollectAgency_Code  string  `protobuf:"bytes,24,opt,name=CollectAgency_Code,json=CollectAgencyCode,proto3" json:"CollectAgency_Code,omitempty"` //样本提取单位行政区划
	CollectAgency_Name  string  `protobuf:"bytes,25,opt,name=CollectAgency_Name,json=CollectAgencyName,proto3" json:"CollectAgency_Name,omitempty"` //样本提取单位名称
	CollectDatetime     string  `protobuf:"bytes,26,opt,name=CollectDatetime,proto3" json:"CollectDatetime,omitempty"`                              //样本提取时间
	CollectUser         string  `protobuf:"bytes,27,opt,name=CollectUser,proto3" json:"CollectUser,omitempty"`                                      //样本提取人
	TestOrgCode         string  `protobuf:"bytes,28,opt,name=TestOrgCode,proto3" json:"TestOrgCode,omitempty"`                                      //样本检验单位行政区划
	TestOrgName         string  `protobuf:"bytes,29,opt,name=TestOrgName,proto3" json:"TestOrgName,omitempty"`                                      //样本检验单位名称
	TestDatetime        string  `protobuf:"bytes,30,opt,name=TestDatetime,proto3" json:"TestDatetime,omitempty"`                                    //样本检验时间
	Tester              string  `protobuf:"bytes,31,opt,name=Tester,proto3" json:"Tester,omitempty"`                                                //样本检验人
	PreExamInfo         string  `protobuf:"bytes,32,opt,name=PreExamInfo,proto3" json:"PreExamInfo,omitempty"`                                      //样本以往检验情况
	PreExamMethod       string  `protobuf:"bytes,33,opt,name=PreExamMethod,proto3" json:"PreExamMethod,omitempty"`                                  //预实验方法
	PreExamDesc         string  `protobuf:"bytes,34,opt,name=PreExamDesc,proto3" json:"PreExamDesc,omitempty"`                                      //预实验描述
	SamplePackaging     string  `protobuf:"bytes,35,opt,name=SamplePackaging,proto3" json:"SamplePackaging,omitempty"`                              //样本包装情况
	SampleDesc          string  `protobuf:"bytes,36,opt,name=SampleDesc,proto3" json:"SampleDesc,omitempty"`                                        //物证描述
	FtaFlag             int64   `protobuf:"varint,37,opt,name=FtaFlag,proto3" json:"FtaFlag,omitempty"`                                             //是否FTA卡
	AcceptOpinion       string  `protobuf:"bytes,38,opt,name=AcceptOpinion,proto3" json:"AcceptOpinion,omitempty"`                                  //受理意见
	SampleStatus        string  `protobuf:"bytes,39,opt,name=SampleStatus,proto3" json:"SampleStatus,omitempty"`                                    //样本状态
	TestPhase           string  `protobuf:"bytes,40,opt,name=TestPhase,proto3" json:"TestPhase,omitempty"`                                          //样本检验阶段
	DeleteFlag          int64   `protobuf:"varint,41,opt,name=DeleteFlag,proto3" json:"DeleteFlag,omitempty"`                                       //删除标识
	GeneStoreFlag       string  `protobuf:"bytes,42,opt,name=GeneStoreFlag,proto3" json:"GeneStoreFlag,omitempty"`                                  //基因更新标志
	TransferFlag        int64   `protobuf:"varint,43,opt,name=TransferFlag,proto3" json:"TransferFlag,omitempty"`                                   //上报标识，0不上报，1待上报，2成功，3等待重试，4错误，5正在上报
	TransferUser        string  `protobuf:"bytes,44,opt,name=TransferUser,proto3" json:"TransferUser,omitempty"`                                    //上报人
	TransferDatetime    string  `protobuf:"bytes,45,opt,name=TransferDatetime,proto3" json:"TransferDatetime,omitempty"`                            //上报时间
	IsAppend            int64   `protobuf:"varint,46,opt,name=IsAppend,proto3" json:"IsAppend,omitempty"`                                           //是否补送
	SpecimenSeqNo       int64   `protobuf:"varint,47,opt,name=SpecimenSeqNo,proto3" json:"SpecimenSeqNo,omitempty"`                                 //样品流水号
	Reserve1            string  `protobuf:"bytes,48,opt,name=Reserve1,proto3" json:"Reserve1,omitempty"`                                            //送检批号
	Reserve2            string  `protobuf:"bytes,49,opt,name=Reserve2,proto3" json:"Reserve2,omitempty"`                                            //送检时间
	Reserve3            string  `protobuf:"bytes,50,opt,name=Reserve3,proto3" json:"Reserve3,omitempty"`                                            //送检人
	Reserve4            string  `protobuf:"bytes,51,opt,name=Reserve4,proto3" json:"Reserve4,omitempty"`                                            //送检单位
	Reserve5            string  `protobuf:"bytes,52,opt,name=Reserve5,proto3" json:"Reserve5,omitempty"`                                            //备用字段5
	Reserve6            string  `protobuf:"bytes,53,opt,name=Reserve6,proto3" json:"Reserve6,omitempty"`                                            //备用字段6
	Remark              string  `protobuf:"bytes,54,opt,name=Remark,proto3" json:"Remark,omitempty"`                                                //备注
	DataSource          string  `protobuf:"bytes,55,opt,name=DataSource,proto3" json:"DataSource,omitempty"`                                        //数据来源
	DataLevel           int64   `protobuf:"varint,56,opt,name=DataLevel,proto3" json:"DataLevel,omitempty"`                                         //数据级别
	CreateUser          string  `protobuf:"bytes,57,opt,name=CreateUser,proto3" json:"CreateUser,omitempty"`                                        //创建人
	CreateDatetime      string  `protobuf:"bytes,58,opt,name=CreateDatetime,proto3" json:"CreateDatetime,omitempty"`                                //创建时间
	UpdateUser          string  `protobuf:"bytes,59,opt,name=UpdateUser,proto3" json:"UpdateUser,omitempty"`                                        //更新人
	UpdateDatetime      string  `protobuf:"bytes,60,opt,name=UpdateDatetime,proto3" json:"UpdateDatetime,omitempty"`                                //更新时间
	SelfObjectId        string  `protobuf:"bytes,61,opt,name=SelfObjectId,proto3" json:"SelfObjectId,omitempty"`                                    //作为自身样本对应的人员ID
	RelationObjectId    string  `protobuf:"bytes,62,opt,name=RelationObjectId,proto3" json:"RelationObjectId,omitempty"`                            //作为亲属样本对应的人员ID
	Relation            string  `protobuf:"bytes,63,opt,name=Relation,proto3" json:"Relation,omitempty"`                                            //作为亲属样本与人员的关系
	PersonRelationDesc  string  `protobuf:"bytes,64,opt,name=PersonRelationDesc,proto3" json:"PersonRelationDesc,omitempty"`                        //人员关系描述
	CollectPurpose      string  `protobuf:"bytes,65,opt,name=CollectPurpose,proto3" json:"CollectPurpose,omitempty"`                                //送检目的
	TypeExtraInfo       string  `protobuf:"bytes,66,opt,name=TypeExtraInfo,proto3" json:"TypeExtraInfo,omitempty"`                                  //类型附加信息
	SpecialDealOption   string  `protobuf:"bytes,67,opt,name=SpecialDealOption,proto3" json:"SpecialDealOption,omitempty"`                          //特殊办理选项
	SampleSerialNo      string  `protobuf:"bytes,68,opt,name=SampleSerialNo,proto3" json:"SampleSerialNo,omitempty"`                                //检材流水号(KM)
	Va                  string  `protobuf:"bytes,69,opt,name=Va,proto3" json:"Va,omitempty"`                                                        //通用字段
	ExtId               string  `protobuf:"bytes,70,opt,name=ExtId,proto3" json:"ExtId,omitempty"`                                                  //外部系统主键
	SignUpload          string  `protobuf:"bytes,71,opt,name=SignUpload,proto3" json:"SignUpload,omitempty"`                                        //是否已标记上报，‘0’：未标记，‘1’：已标记
	GeneFlag            int64   `protobuf:"varint,72,opt,name=GeneFlag,proto3" json:"GeneFlag,omitempty"`                                           //
	Genotype            string  `protobuf:"bytes,73,opt,name=Genotype,proto3" json:"Genotype,omitempty"`                                            //
	ReviewUser          string  `protobuf:"bytes,74,opt,name=ReviewUser,proto3" json:"ReviewUser,omitempty"`                                        //复核人
	ReviewDatetime      string  `protobuf:"bytes,75,opt,name=ReviewDatetime,proto3" json:"ReviewDatetime,omitempty"`                                //复核时间
	LocalStoreDatetime  string  `protobuf:"bytes,76,opt,name=LocalStoreDatetime,proto3" json:"LocalStoreDatetime,omitempty"`                        //上报更新时间
	LocalCreateDatetime string  `protobuf:"bytes,77,opt,name=LocalCreateDatetime,proto3" json:"LocalCreateDatetime,omitempty"`                      //上报新增时间
	Section             string  `protobuf:"bytes,78,opt,name=Section,proto3" json:"Section,omitempty"`                                              //专业
	Rfid                string  `protobuf:"bytes,79,opt,name=Rfid,proto3" json:"Rfid,omitempty"`                                                    // rfid
	Tag                 *TagBiz `protobuf:"bytes,80,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *SampleInfo) Reset() {
	*x = SampleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleInfo) ProtoMessage() {}

func (x *SampleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleInfo.ProtoReflect.Descriptor instead.
func (*SampleInfo) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{8}
}

func (x *SampleInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SampleInfo) GetInitServerNo() string {
	if x != nil {
		return x.InitServerNo
	}
	return ""
}

func (x *SampleInfo) GetLabId() string {
	if x != nil {
		return x.LabId
	}
	return ""
}

func (x *SampleInfo) GetConsignmentId() string {
	if x != nil {
		return x.ConsignmentId
	}
	return ""
}

func (x *SampleInfo) GetConsignOrgCode() string {
	if x != nil {
		return x.ConsignOrgCode
	}
	return ""
}

func (x *SampleInfo) GetPhysicalEvidenceId() string {
	if x != nil {
		return x.PhysicalEvidenceId
	}
	return ""
}

func (x *SampleInfo) GetSampleNo() string {
	if x != nil {
		return x.SampleNo
	}
	return ""
}

func (x *SampleInfo) GetSampleLabNo() string {
	if x != nil {
		return x.SampleLabNo
	}
	return ""
}

func (x *SampleInfo) GetSampleName() string {
	if x != nil {
		return x.SampleName
	}
	return ""
}

func (x *SampleInfo) GetSampleType() string {
	if x != nil {
		return x.SampleType
	}
	return ""
}

func (x *SampleInfo) GetSpecialty() string {
	if x != nil {
		return x.Specialty
	}
	return ""
}

func (x *SampleInfo) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SampleInfo) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *SampleInfo) GetTexture() string {
	if x != nil {
		return x.Texture
	}
	return ""
}

func (x *SampleInfo) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *SampleInfo) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SampleInfo) GetEvidenceSize() string {
	if x != nil {
		return x.EvidenceSize
	}
	return ""
}

func (x *SampleInfo) GetSpecialSign() string {
	if x != nil {
		return x.SpecialSign
	}
	return ""
}

func (x *SampleInfo) GetIsCollect() int64 {
	if x != nil {
		return x.IsCollect
	}
	return 0
}

func (x *SampleInfo) GetIsTest() int64 {
	if x != nil {
		return x.IsTest
	}
	return 0
}

func (x *SampleInfo) GetCollectMethod() string {
	if x != nil {
		return x.CollectMethod
	}
	return ""
}

func (x *SampleInfo) GetCollectPos() string {
	if x != nil {
		return x.CollectPos
	}
	return ""
}

func (x *SampleInfo) GetCollectReason() string {
	if x != nil {
		return x.CollectReason
	}
	return ""
}

func (x *SampleInfo) GetCollectAgency_Code() string {
	if x != nil {
		return x.CollectAgency_Code
	}
	return ""
}

func (x *SampleInfo) GetCollectAgency_Name() string {
	if x != nil {
		return x.CollectAgency_Name
	}
	return ""
}

func (x *SampleInfo) GetCollectDatetime() string {
	if x != nil {
		return x.CollectDatetime
	}
	return ""
}

func (x *SampleInfo) GetCollectUser() string {
	if x != nil {
		return x.CollectUser
	}
	return ""
}

func (x *SampleInfo) GetTestOrgCode() string {
	if x != nil {
		return x.TestOrgCode
	}
	return ""
}

func (x *SampleInfo) GetTestOrgName() string {
	if x != nil {
		return x.TestOrgName
	}
	return ""
}

func (x *SampleInfo) GetTestDatetime() string {
	if x != nil {
		return x.TestDatetime
	}
	return ""
}

func (x *SampleInfo) GetTester() string {
	if x != nil {
		return x.Tester
	}
	return ""
}

func (x *SampleInfo) GetPreExamInfo() string {
	if x != nil {
		return x.PreExamInfo
	}
	return ""
}

func (x *SampleInfo) GetPreExamMethod() string {
	if x != nil {
		return x.PreExamMethod
	}
	return ""
}

func (x *SampleInfo) GetPreExamDesc() string {
	if x != nil {
		return x.PreExamDesc
	}
	return ""
}

func (x *SampleInfo) GetSamplePackaging() string {
	if x != nil {
		return x.SamplePackaging
	}
	return ""
}

func (x *SampleInfo) GetSampleDesc() string {
	if x != nil {
		return x.SampleDesc
	}
	return ""
}

func (x *SampleInfo) GetFtaFlag() int64 {
	if x != nil {
		return x.FtaFlag
	}
	return 0
}

func (x *SampleInfo) GetAcceptOpinion() string {
	if x != nil {
		return x.AcceptOpinion
	}
	return ""
}

func (x *SampleInfo) GetSampleStatus() string {
	if x != nil {
		return x.SampleStatus
	}
	return ""
}

func (x *SampleInfo) GetTestPhase() string {
	if x != nil {
		return x.TestPhase
	}
	return ""
}

func (x *SampleInfo) GetDeleteFlag() int64 {
	if x != nil {
		return x.DeleteFlag
	}
	return 0
}

func (x *SampleInfo) GetGeneStoreFlag() string {
	if x != nil {
		return x.GeneStoreFlag
	}
	return ""
}

func (x *SampleInfo) GetTransferFlag() int64 {
	if x != nil {
		return x.TransferFlag
	}
	return 0
}

func (x *SampleInfo) GetTransferUser() string {
	if x != nil {
		return x.TransferUser
	}
	return ""
}

func (x *SampleInfo) GetTransferDatetime() string {
	if x != nil {
		return x.TransferDatetime
	}
	return ""
}

func (x *SampleInfo) GetIsAppend() int64 {
	if x != nil {
		return x.IsAppend
	}
	return 0
}

func (x *SampleInfo) GetSpecimenSeqNo() int64 {
	if x != nil {
		return x.SpecimenSeqNo
	}
	return 0
}

func (x *SampleInfo) GetReserve1() string {
	if x != nil {
		return x.Reserve1
	}
	return ""
}

func (x *SampleInfo) GetReserve2() string {
	if x != nil {
		return x.Reserve2
	}
	return ""
}

func (x *SampleInfo) GetReserve3() string {
	if x != nil {
		return x.Reserve3
	}
	return ""
}

func (x *SampleInfo) GetReserve4() string {
	if x != nil {
		return x.Reserve4
	}
	return ""
}

func (x *SampleInfo) GetReserve5() string {
	if x != nil {
		return x.Reserve5
	}
	return ""
}

func (x *SampleInfo) GetReserve6() string {
	if x != nil {
		return x.Reserve6
	}
	return ""
}

func (x *SampleInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SampleInfo) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *SampleInfo) GetDataLevel() int64 {
	if x != nil {
		return x.DataLevel
	}
	return 0
}

func (x *SampleInfo) GetCreateUser() string {
	if x != nil {
		return x.CreateUser
	}
	return ""
}

func (x *SampleInfo) GetCreateDatetime() string {
	if x != nil {
		return x.CreateDatetime
	}
	return ""
}

func (x *SampleInfo) GetUpdateUser() string {
	if x != nil {
		return x.UpdateUser
	}
	return ""
}

func (x *SampleInfo) GetUpdateDatetime() string {
	if x != nil {
		return x.UpdateDatetime
	}
	return ""
}

func (x *SampleInfo) GetSelfObjectId() string {
	if x != nil {
		return x.SelfObjectId
	}
	return ""
}

func (x *SampleInfo) GetRelationObjectId() string {
	if x != nil {
		return x.RelationObjectId
	}
	return ""
}

func (x *SampleInfo) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *SampleInfo) GetPersonRelationDesc() string {
	if x != nil {
		return x.PersonRelationDesc
	}
	return ""
}

func (x *SampleInfo) GetCollectPurpose() string {
	if x != nil {
		return x.CollectPurpose
	}
	return ""
}

func (x *SampleInfo) GetTypeExtraInfo() string {
	if x != nil {
		return x.TypeExtraInfo
	}
	return ""
}

func (x *SampleInfo) GetSpecialDealOption() string {
	if x != nil {
		return x.SpecialDealOption
	}
	return ""
}

func (x *SampleInfo) GetSampleSerialNo() string {
	if x != nil {
		return x.SampleSerialNo
	}
	return ""
}

func (x *SampleInfo) GetVa() string {
	if x != nil {
		return x.Va
	}
	return ""
}

func (x *SampleInfo) GetExtId() string {
	if x != nil {
		return x.ExtId
	}
	return ""
}

func (x *SampleInfo) GetSignUpload() string {
	if x != nil {
		return x.SignUpload
	}
	return ""
}

func (x *SampleInfo) GetGeneFlag() int64 {
	if x != nil {
		return x.GeneFlag
	}
	return 0
}

func (x *SampleInfo) GetGenotype() string {
	if x != nil {
		return x.Genotype
	}
	return ""
}

func (x *SampleInfo) GetReviewUser() string {
	if x != nil {
		return x.ReviewUser
	}
	return ""
}

func (x *SampleInfo) GetReviewDatetime() string {
	if x != nil {
		return x.ReviewDatetime
	}
	return ""
}

func (x *SampleInfo) GetLocalStoreDatetime() string {
	if x != nil {
		return x.LocalStoreDatetime
	}
	return ""
}

func (x *SampleInfo) GetLocalCreateDatetime() string {
	if x != nil {
		return x.LocalCreateDatetime
	}
	return ""
}

func (x *SampleInfo) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *SampleInfo) GetRfid() string {
	if x != nil {
		return x.Rfid
	}
	return ""
}

func (x *SampleInfo) GetTag() *TagBiz {
	if x != nil {
		return x.Tag
	}
	return nil
}

// 样本与对象关系表
type SamplePersonMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`                         //主键ID
	PersonObjectId string  `protobuf:"bytes,2,opt,name=PersonObjectId,proto3" json:"PersonObjectId,omitempty"` //对象ID
	SampleId       string  `protobuf:"bytes,3,opt,name=SampleId,proto3" json:"SampleId,omitempty"`             //样本ID
	Relation       string  `protobuf:"bytes,4,opt,name=Relation,proto3" json:"Relation,omitempty"`             //样本与对象关系
	Tag            *TagBiz `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *SamplePersonMap) Reset() {
	*x = SamplePersonMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplePersonMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplePersonMap) ProtoMessage() {}

func (x *SamplePersonMap) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplePersonMap.ProtoReflect.Descriptor instead.
func (*SamplePersonMap) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{9}
}

func (x *SamplePersonMap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SamplePersonMap) GetPersonObjectId() string {
	if x != nil {
		return x.PersonObjectId
	}
	return ""
}

func (x *SamplePersonMap) GetSampleId() string {
	if x != nil {
		return x.SampleId
	}
	return ""
}

func (x *SamplePersonMap) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *SamplePersonMap) GetTag() *TagBiz {
	if x != nil {
		return x.Tag
	}
	return nil
}

// biz 扩展
type TagBiz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ty    uint32 `protobuf:"varint,1,opt,name=ty,proto3" json:"ty,omitempty"`      // 操作类型
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"` // topic
}

func (x *TagBiz) Reset() {
	*x = TagBiz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_queue_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagBiz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagBiz) ProtoMessage() {}

func (x *TagBiz) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagBiz.ProtoReflect.Descriptor instead.
func (*TagBiz) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{10}
}

func (x *TagBiz) GetTy() uint32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

func (x *TagBiz) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

var File_queue_proto protoreflect.FileDescriptor

var file_queue_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x3a, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x44, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x74, 0x61, 0x67, 0x42, 0x69, 0x7a, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x22, 0x9a, 0x19, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x5f, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x36, 0x0a, 0x17,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x4f, 0x72, 0x67, 0x5f, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x73, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x4f, 0x72, 0x67, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x4f, 0x72, 0x67, 0x5f, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x4f, 0x72, 0x67, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x4f, 0x72, 0x67, 0x5f, 0x46, 0x61, 0x78, 0x5f, 0x4e, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4f,
	0x72, 0x67, 0x46, 0x61, 0x78, 0x4e, 0x6f, 0x12, 0x2f, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x4f, 0x72, 0x67, 0x5f, 0x5a, 0x69, 0x70, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x72,
	0x67, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x4f, 0x72, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x72,
	0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x30, 0x0a,
	0x14, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x79,
	0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x10, 0x52, 0x65, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x44, 0x75,
	0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x3c, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x5a, 0x69, 0x70, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0x27, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x44, 0x75, 0x74, 0x79, 0x32, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x44, 0x75, 0x74, 0x79, 0x32, 0x12, 0x29, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x32, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x32,
	0x12, 0x3e, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x32, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x12, 0x3a, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x32, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x32, 0x12, 0x2d, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x12, 0x2e, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x5a, 0x69, 0x70, 0x5f, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x4e, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x73, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x26, 0x0a,
	0x0f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x4f, 0x72, 0x67, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x4f, 0x72, 0x67, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6d, 0x69, 0x73, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f,
	0x6d, 0x69, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74,
	0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x4f, 0x70, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x70, 0x69, 0x6e, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x49, 0x73, 0x5f, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49, 0x73, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x53, 0x65, 0x71, 0x5f, 0x4e,
	0x6f, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x65, 0x71, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x33, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x34, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x35, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x35, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36, 0x12, 0x1f, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x49, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x14, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x6d,
	0x12, 0x23, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x43, 0x61, 0x73, 0x65, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x4d, 0x73, 0x67, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x54, 0x61, 0x73, 0x6b, 0x5f, 0x4e, 0x6f, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x46, 0x61, 0x78, 0x5f, 0x4e, 0x6f, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x46, 0x61, 0x78, 0x4e, 0x6f, 0x12,
	0x2a, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x46, 0x61, 0x78,
	0x5f, 0x4e, 0x6f, 0x32, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x46, 0x61, 0x78, 0x4e, 0x6f, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x4e,
	0x6f, 0x5f, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x5f, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x6f, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x56, 0x61, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x56, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x48, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x45, 0x78, 0x74,
	0x5f, 0x49, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x44, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x44, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x74, 0x61, 0x67, 0x42, 0x69, 0x7a, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xa0,
	0x10, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x49,
	0x6e, 0x69, 0x74, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x15, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x5f, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x43, 0x61, 0x73, 0x65,
	0x5f, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x61, 0x73, 0x65, 0x4e,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x43, 0x61, 0x73, 0x65, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x73, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x43, 0x61, 0x73, 0x65, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x43, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x43, 0x61, 0x73,
	0x65, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x48, 0x61, 0x72, 0x6d, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x48, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a,
	0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x41, 0x72, 0x65, 0x61, 0x5f, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x43, 0x61, 0x73, 0x65, 0x5f, 0x49, 0x6e,
	0x66, 0x6f, 0x5f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x65, 0x5f, 0x42, 0x72, 0x69, 0x65, 0x66, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x61, 0x73, 0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x1f,
	0x0a, 0x0b, 0x43, 0x61, 0x73, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x50, 0x68, 0x79, 0x5f, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x68,
	0x79, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x33, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x34, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x34, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x35, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x35, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x43, 0x61, 0x73, 0x65, 0x5f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x33, 0x5f, 0x4e, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x33, 0x4e, 0x6f, 0x12,
	0x2e, 0x0a, 0x13, 0x43, 0x61, 0x73, 0x65, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x61,
	0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x49, 0x73, 0x5f, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x49, 0x73, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x49, 0x73, 0x5f, 0x4d, 0x75, 0x72, 0x64, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x49, 0x73, 0x4d, 0x75, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x49, 0x6e, 0x76,
	0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x44, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x4e, 0x75, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x44, 0x65, 0x61, 0x74, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x50, 0x69, 0x63, 0x5f, 0x44, 0x75, 0x74,
	0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x69, 0x63, 0x44, 0x75, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x50, 0x69, 0x63, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x69, 0x63, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x50, 0x69, 0x63, 0x5f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x69, 0x63,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x50, 0x69, 0x63, 0x5f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x69, 0x63,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x43, 0x61,
	0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x43, 0x61, 0x73,
	0x65, 0x5f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x4e, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x49, 0x73, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x56, 0x61, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x56, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x73, 0x65, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x61, 0x73, 0x65,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x45, 0x78,
	0x74, 0x5f, 0x49, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x55, 0x72, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x74, 0x61, 0x67, 0x42, 0x69, 0x7a, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x22, 0xe1, 0x06, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x35, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x49, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x74, 0x61, 0x67, 0x42, 0x69, 0x7a,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x82, 0x08, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x61, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x74,
	0x61, 0x67, 0x42, 0x69, 0x7a, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xe0, 0x16, 0x0a, 0x0a, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x69, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6f, 0x64, 0x69, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x12,
	0x24, 0x0a, 0x0d, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x67, 0x68,
	0x41, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x75, 0x67, 0x68,
	0x41, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x67, 0x68, 0x6c, 0x79, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52,
	0x6f, 0x75, 0x67, 0x68, 0x6c, 0x79, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x69,
	0x6e, 0x73, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x45, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x6e, 0x76, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x49,
	0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x43, 0x61, 0x73,
	0x65, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x4e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x61, 0x74, 0x68, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44, 0x65, 0x61, 0x74, 0x68, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x33, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x34, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x34, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x35, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x35, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x62, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x62, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x66, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x66, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73,
	0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x66, 0x54, 0x65, 0x73, 0x74, 0x44, 0x6e, 0x61, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x66, 0x54, 0x65, 0x73, 0x74, 0x44, 0x6e, 0x61, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x41, 0x72, 0x72, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x73, 0x41, 0x72, 0x72, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x72, 0x72, 0x65, 0x73, 0x74, 0x44, 0x61, 0x65, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x72, 0x72, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x4f,
	0x66, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x73, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x56, 0x61, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x56, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x74,
	0x49, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x6f, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x72,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x67, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x41, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x61, 0x63, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52,
	0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x6d, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x6f, 0x6d, 0x65,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x45,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x16, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x74, 0x61, 0x67, 0x42, 0x69, 0x7a, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xb6, 0x0b,
	0x0a, 0x10, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x33, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x33, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x35, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x61, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x44, 0x65, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x56, 0x61, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x56, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x49,
	0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4f,
	0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x74, 0x61, 0x67, 0x42, 0x69,
	0x7a, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x99, 0x09, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x44, 0x6e, 0x61, 0x47, 0x65, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69,
	0x78, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x69, 0x78,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78,
	0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4b,
	0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x65, 0x61,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64,
	0x65, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x56, 0x61, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x56, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x74, 0x61, 0x67, 0x42, 0x69, 0x7a, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x22, 0xf2, 0x14, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x72, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c,
	0x61, 0x62, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x4c, 0x61, 0x62, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x54, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x49, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x74, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x46, 0x74, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x70, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x70, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x65,
	0x6e, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x49, 0x73, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x53, 0x65, 0x71, 0x4e,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x33, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x34, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x34, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x35, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x35, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x61,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x56, 0x61, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x56, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x49, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x78, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x48, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x66, 0x69, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x52, 0x66, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x74, 0x61, 0x67, 0x42,
	0x69, 0x7a, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x74, 0x61, 0x67, 0x42, 0x69, 0x7a, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x2e, 0x0a,
	0x06, 0x74, 0x61, 0x67, 0x42, 0x69, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x0b, 0x5a,
	0x09, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_queue_proto_rawDescOnce sync.Once
	file_queue_proto_rawDescData = file_queue_proto_rawDesc
)

func file_queue_proto_rawDescGZIP() []byte {
	file_queue_proto_rawDescOnce.Do(func() {
		file_queue_proto_rawDescData = protoimpl.X.CompressGZIP(file_queue_proto_rawDescData)
	})
	return file_queue_proto_rawDescData
}

var file_queue_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_queue_proto_goTypes = []interface{}{
	(*Test)(nil),                 // 0: protos.Test
	(*Consignment)(nil),          // 1: protos.Consignment
	(*CaseInfo)(nil),             // 2: protos.CaseInfo
	(*EventInfo)(nil),            // 3: protos.EventInfo
	(*IdentificationReport)(nil), // 4: protos.IdentificationReport
	(*PersonInfo)(nil),           // 5: protos.PersonInfo
	(*PhysicalEvidence)(nil),     // 6: protos.PhysicalEvidence
	(*SampleDnaGene)(nil),        // 7: protos.SampleDnaGene
	(*SampleInfo)(nil),           // 8: protos.SampleInfo
	(*SamplePersonMap)(nil),      // 9: protos.SamplePersonMap
	(*TagBiz)(nil),               // 10: protos.tagBiz
}
var file_queue_proto_depIdxs = []int32{
	10, // 0: protos.Test.tag:type_name -> protos.tagBiz
	10, // 1: protos.Consignment.tag:type_name -> protos.tagBiz
	10, // 2: protos.CaseInfo.tag:type_name -> protos.tagBiz
	10, // 3: protos.EventInfo.tag:type_name -> protos.tagBiz
	10, // 4: protos.IdentificationReport.tag:type_name -> protos.tagBiz
	10, // 5: protos.PersonInfo.tag:type_name -> protos.tagBiz
	10, // 6: protos.PhysicalEvidence.tag:type_name -> protos.tagBiz
	10, // 7: protos.SampleDnaGene.tag:type_name -> protos.tagBiz
	10, // 8: protos.SampleInfo.tag:type_name -> protos.tagBiz
	10, // 9: protos.SamplePersonMap.tag:type_name -> protos.tagBiz
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_queue_proto_init() }
func file_queue_proto_init() {
	if File_queue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_queue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentificationReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalEvidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleDnaGene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplePersonMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_queue_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagBiz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_queue_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_queue_proto_goTypes,
		DependencyIndexes: file_queue_proto_depIdxs,
		MessageInfos:      file_queue_proto_msgTypes,
	}.Build()
	File_queue_proto = out.File
	file_queue_proto_rawDesc = nil
	file_queue_proto_goTypes = nil
	file_queue_proto_depIdxs = nil
}
